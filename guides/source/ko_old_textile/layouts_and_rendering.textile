h2. 레일스의 레이아웃과 렌더링

본 가이드에서는 액션 컨트롤러와 액션 뷰의 기본 레이아웃 기능을 다루게 됩니다. 본 가이드를 참조하여 다음을 구현할 수 있습니다.:

* 레일스에 내장된 다양한 렌더일 메소드 사용하기
* 다중 컨텐츠 섹션과 함께 레이아웃 구성하기
* partial 템플릿을 이용하여 뷰 템플릿의 중복 코드 없애기
* 중첩레이아웃(서브템플릿) 사용하기 

endprologue.

h3(#Overview-How-the-Pieces-Fit-Together). 개요 : 컨텐츠 조각들을 합치는 방법

이 가이드는 MVC 삼각구도에서 컨트롤러와 뷰 사이의 상호작용에 촛점을 맞추어 설명합니다. 알다시피, 컨트롤러는, 보통 많은 양의 코드가 모델에 집중되기는 하지만, 레일스에서 요청을 처리하는 전체 과정을 지휘하는 역할을 합니다. 그러나 유저에게 응답을 보낼 때, 컨트롤러는 뷰로 권한을 이양하게 됩니다. 이러한 과정을 본 가이드에서 다루게 됩니다. 

대략적으로 이러한 과정은 응답으로 무엇을 보낼 것이고 응답을 만들기 위해 어떤 메소드를 호출할 것인가를 결정하게 됩니다. 응답으로 전체 뷰를 만들 경우, 레일스는 어떤 추가적인 작업을 수행하여 하나의 레이아웃으로 뷰를 감싸고 가능하면 @partial@ 를 이용하게 됩니다. 이 모든 것을 본 가이드에게 알게 될 것입니다. 

h3(#Creating-Responses). 응답 만들기

컨트롤러의 입장에서 볼 때 HTTP 응답을 보내는 방법으로 세가지가 있습니다:

* +render+ 을 호출하여 브라우져로 완전한 응답을 보냅니다.
* +redirect_to+ 를 호출하여 브라우져로 HTTP 리디렉트 상태코드를 보냅니다.
* +head+ 를 호출하여 브라우져로 보내게 될 HTTP 헤더만으로 구성된 응답을 만들어 줍니다.

차례대로 이 메소드에 대해서 다룰 것이지만 무엇보다도, 컨트롤러가 응답을 만들기 위해서 할 수 있는 가장 손쉬운 것은 아무것도 없다는 것입니다.

h4(#Rendering-by-Default-Convention-Over-Configuration-in-Action). 디폴트 상태로 렌더링하기 : 액션에서의 규칙

알다시피 레일스는 "convention over configuration"(설정보다는 규칙)을 내세우고 있습니다. 디폴트 렌더링이 대표적인 예가 될 수 있습니다. 디폴트로 레일스의 컨트롤러는 라우트에 해당하는 이름으로 뷰를 렌더링합니다. 예를 들면, +BooksController+ 클래스가 다음과 같을 경우:

<ruby>
class BooksController < ApplicationController
end
</ruby>

라우트 파일에서 리소스 라우팅이 다음과 같고:

<ruby>
resources :books
</ruby>

+app/vews/books/index.html.erb+ 뷰 파일이 다음과 같다면:

<ruby>
<h1>Books are coming soon!</h1>
</ruby>

+/books+ 로 이동할 경우 레일스는 자동으로 +app/views/books/index.html.erb+ 를 렌더링해서 스크린상에 “Books are coming soon!”이라는 문구를 보여 줄 것입니다.

그러나 이 문구가 보이는 스크린은 그렇게 유용한 정보가 없어서 +Book+ 모델을 만들어서 +BooksController+ 에 index 액션을 추가해 보도록 하겠습니다:

<ruby>
class BooksController < ApplicationController
  def index
    @books = Book.all
  end
end
</ruby>

여기서 주목할 것은 CoC(설정보다는 규칙)원칙에 따라 @index@ 액션 마지막에 render 메소드가 명시되어 있지 않다는 것 입니다. 즉, 컨트롤러 액션의 마지막에 명시적으로 무언가를 render 하지 않는다면 레일스는 자동으로 컨트롤러의 뷰 경로상의 +action_name.html.erb+ 템플릿을 찾아 렌더링할 것입니다. 따라서 이 경우에, 레일스는 +app/views/books/index.html.erb+ 파일을 렌더링하게 될 것입니다.

만약 현재의 뷰에서 모든 책의 특징을 디스플레이하고자 한다면, ERB 템플릿을 다음과 같이 작성할 수 있습니다:

<ruby>
<h1>Listing Books</h1>

<table>
  <tr>
    <th>Title</th>
    <th>Summary</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @books.each do |book| %>
  <tr>
    <td><%= book.title %></td>
    <td><%= book.content %></td>
    <td><%= link_to "Show", book %></td>
    <td><%= link_to "Edit", edit_book_path(book) %></td>
    <td><%= link_to "Remove", book, :confirm => "Are you sure?", :method => :delete %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to "New book", new_book_path %>
</ruby>

NOTE: 실제적인 렌더링 작업은 +ActionsView::TemplateHandlers+ 가 하게 됩니다. 본 가이드에서는 이 과정을 깊숙이 다루지 않을 것이지만, 뷰 파일의 확장자에 따라 어떤 템플릿 핸들러가 작업을 하게 되는지를 결정하게 된다는 것을 아는 것이 중요합니다. 레일스 2에서는 ERB(루비코드가 임베디드된 HTML)에 대한 표준 확장자는 +.erb+ 이고 Builder(XML 생성기)에 대한 확장자는 +.builder+ 입니다.

h4(#Using-render). +render+ 사용하기

대부분의 경우, +ActionController::Base#render+ 메소드는 브라우져에 보여 줄 어플리케이션의 내용물을 렌더링하는 힘든 작업을 하게 됩니다. 이러한 +render+ 메소드의 작업을 변경하는 방법에는 여러가지가 있습니다. 즉, +render+ 메소드는 레일스 템플릿의 디폴트 뷰, 특정 템플릿, 파일, 또는 인라인 코드를 렌더링할 수 있다는 것입니다. 개발자는 이러한 내용물을 텍스트, JSON, 또는 XML 포맷으로 렌더링할 수 있습니다. 또한 렌더링되는 응답내용물의 포맷이나 HTTP 상태를 명시할 수 있습니다.

TIP: +render+ 호출에 대한 정확한 결과물을 브라우져상에서 보지 않기를 원한다면, +render_to_string+ 를 호출할 수 있습니다. 이 메소드는 +render+와 동일한 옵션을 설정할 수 있지만, 응답내용을 브라우져가 아닌 문자열로 반환한다는 것입니다.

h5(#Rendering-Nothing). 아무것도 렌더링하지 않기

아마도 +render+로 할 수 있는 가장 간단한 것은 아무것도 렌더링하지 않는 것입니다:

<ruby>
render :nothing => true
</ruby>

cURL를 이용해서 응답내용을 본다면, 다음과 같을 것입니다:

<shell>
$ curl -i 127.0.0.1:3000/books
HTTP/1.1 200 OK
Connection: close
Date: Sun, 24 Jan 2010 09:25:18 GMT
Transfer-Encoding: chunked
Content-Type: */*; charset=utf-8
X-Runtime: 0.014297
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache


 $
</shell>

(+Cache-Control+ 라인 이후에 데이터가 없음) 응답내용이 아무 것도 없다는 것을 알 수 있지만 레일스가 응답코드로 200을 설정했기 때문에 요청이 성공적으로 이루어 진 것입니다. 이 응답을 변경하기 위해서는 렌더링시에 +:status+ 옵션을 설정하면 됩니다. 아무 것도 렌더링하지 않는 것은, 브라우저로 보내고자 하는 것이 그저 요청이 완료되었다는 내용 뿐인 AJAX 요청일 경우에 유용합니다.

TIP: +render :nothing+ 대신에, 본 가이드의 나중에 언급될 것이지만, +head+ 메소드를 사용해야 할 것입니다. 이렇게 하면 보다 유연하게 작업을 할 수 있고 단지 HTTP 헤더만을 생성한다는 것을 명시적으로 알 수 있게 됩니다.

h5(#Rendering-an-Actions-View). 액션 뷰 렌더링하기

동일한 템플릿내에서 다른 액션에 해당하는 뷰를 렌더링하고자 한다면, 해당 뷰의 이름으로 +render+ 메소드를 이용할 수 있습니다:

<ruby>
def update
  @book = Book.find(params[:id])
  if @book.update_attributes(params[:book])
    redirect_to(@book)
  else
    render "edit"
  end
end
</ruby>

+update_attributes+ 호출이 실패한다면 이 컨트롤러에 있는 +update+ 액션에 대한 호출은 동일한 컨트롤러 내의 +edit.html.erb+ 템플릿을 렌더링하게 될 것입니다.

개발자의 선호도에 따라, 렌더링할 액션을 명시하기 위해 문자열 대신에 심볼을 사용할 수도 있습니다:

<ruby>
def update
  @book = Book.find(params[:id])
  if @book.update_attributes(params[:book])
    redirect_to(@book)
  else
    render :edit
  end
end
</ruby>

(레일스 3.0 이후부터는 더 이상 필요없게 되었지만,) 명확하게 하기 위해서 +:action+ 옵션을 추가하여 +render+ 메소드를 이용할 수도 있습니다:

<ruby>
def update
  @book = Book.find(params[:id])
  if @book.update_attributes(params[:book])
    redirect_to(@book)
  else
    render :action => "edit"
  end
end
</ruby>

WARNING: +:action+ 옵션으로 +render+ 메소드를 사용할 경우 레일스 초보자들에게는 혼선을 빚을 수 있습니다. 여기서의 명시된 액션은 렌더링할 뷰를 결정하기 위한 것으므로 레일스가 컨트롤러의 해당 액션에 대한 어떠한 코드도 실행하지 않는다는 것입니다. 따라서 명시된 액션의 뷰에서 필요로하는 인스턴스 변수들은 +render+ 를 호출하기 전에 현재의 액션에서 설정되어야만 한다는 것입니다.

h5(#Rendering-an-Action-s-Template-from-Another-Controller). 다른 컨트롤러에 있는 액션 템플릿을 렌더링하기

액션코드가 있는 컨트롤러와는 완전 다른 컨트롤러에 있는 템플릿을 렌더링하고자 한다면 어떻게 될까요? 이 때는 렌더링할 템플릿의 +app/views+ 디렉토리의 상대경로을 지정해 주고 +render+ 메소드를 호출하면 됩니다. 예를 들면, +app/controllers/admin+ 폴더에 있는 +AdminProductsController+ 에서 코드를 실행하고자 하면 해당 액션의 결과는 다음과 같이 +app/views/products+ 폴더에 있는 템플릿으로 렌더링할 수 있습니다:

<ruby>
render "products/show"
</ruby>

문자열 중 슬래시 문자 때문에 렌더링할 템플릿이 다른 컨트롤러에 속한다는 레일스가 알게 됩니다. 좀 더 명확하기 위해서 +:template+ 이라는 옵션을 추가할 수 있는데, 이것은 레일스 2.2와 이전 버전에서는 반드시 명시해야만 했었습니다:

<ruby>
render :template => "products/show"
</ruby>

h5(#Rendering-an-ArbitraryFile). 임의의 파일을 렌더링하기

(두개의 레일스 어플리케이션에서 특정 뷰 파일을 공유할 경우,) +render+ 메소드를 이용해서 현재의 어플리케이션의 외부에 있는 뷰 파일을 이용할 수 있습니다:

<ruby>
render "/u/apps/warehouse_app/current/app/views/products/show"
</ruby>

문자열의 맨 앞에 있는 슬래시 문자로 레일스는 이것이 파일을 렌더링하는 것이라고 인식하게 됩니다. 보다 확실히 하기 위해, (레일스 2.2와 이전 버젼에서는 반드시 명시해야 했던) +:file+ 옵션을 추가할 수도 있습니다:

<ruby>
render :file =>
  "/u/apps/warehouse_app/current/app/views/products/show"
</ruby>

여기서 +:file+ 옵션은 파일시스템의 절대경로를 이용해서 명시해야합니다. 물론 내용물을 렌더링하게 될 뷰 파일에 대한 접근 권한이 있어야 합니다.

NOTE: 디폴트로, 해당 파일은 현재의 레이아웃을 적용하지 않은 상태로 렌더링됩니다. 만약 현재의 레이아웃으로 파일을 불러들이고자 한다면, +:layout => true+ 옵션을 추가해 주어야 합니다.

TIP: 마이크로소프트 윈도우즈에서 레일스를 실행한다면, 위도우즈 파일명은 유닉스 파일명과는 다른 포맷을 사용하기 때문에 특정 파일을 렌더링하고자 한다면 +:file+ 옵션을 반드시 추가해 주어야 합니다.

h5(#Wrapping-it-up). 정리하기

지금까지 소개한 렌더링에 관한 3가지 방법(컨트롤러내의 다른 액션의 템플릿 렌더링하기, 다른 컨트롤러내의 템플릿을 렌더링하기, 파일시스템 내의 임의의 파일 렌더링하기)은 사실 동일한 작업에 대한 변형들입니다.

사실, 특정 book에 대한 업데이트가 실패할 경우 update 액션에서 edit 템플릿을 렌더링하고자 할 경우, 아래의 모든 렌더링 호출은 +views/books+ 디렉토리에 있는 동일한 +edit.html.erb+ 템플릿을 렌더링하게 될 것입니다:

<ruby>
render :edit
render :action => :edit
render "edit"
render "edit.html.erb"
render :action => "edit"
render :action => "edit.html.erb"
render "books/edit"
render "books/edit.html.erb"
render :template => "books/edit"
render :template => "books/edit.html.erb"
render "/path/to/rails/app/views/books/edit"
render "/path/to/rails/app/views/books/edit.html.erb"
render :file => "/path/to/rails/app/views/books/edit"
render :file => "/path/to/rails/app/views/books/edit.html.erb"
</ruby>

어떤 것을 사용할 것인가는 사실 본인의 스타일과 규칙에 관한 것이지만, 원칙은 가장 간단한 것을 사용한 것입니다.

h5(#Using-render-with-inline). +:inline+ 으로 +render+ 하기

ERB를 제공해 주기 위해서 메소드 호출의 일부로 +:inline+ 옵션을 이용하면 뷰 템플릿 없이도 +render+ 메소드가 작업을 할 수 있습니다. 다음과 같은 렌더링 코드에서도 +render+ 메소드가 완벽하게 동작합니다:

<ruby>
render :inline =>
  "<% products.each do |p| %><p><%= p.name %></p><% end %>"
</ruby>

WARNING: 사실 이 옵션을 사용할 이유는 거의 없다고 보면 됩니다. ERB를 컨트롤러에 섞어 버리면 레일스의 MVC 구현 정책에 위배 되는 것이고 다른 개발자들이 해당 프로젝트의 로직을 이해하기가 힘들어 질 것입니다. 따라서 대신에 별도의 erb 뷰 파일을 사용하기 바랍니다.

기본적으로, inline 렌더링은 ERB를 사용합니다. 그러나 +:type+ 옵션을 사용하면 대신에 Builder를 사용하도록 할 수 있습니다:

<ruby>
render :inline =>
  "xml.p {'Horrid coding practice!'}", :type => :builder
</ruby>

h5(#Rendering-Text). 텍스트 렌더링하기

+render+ 메소드에 :+text+ 옵션을 이용하면 전혀 HTML 태그들을 사용하지 않고 브라우저로 단순한 텍스트만 보낼 수 있습니다:

<ruby>
render :text => "OK"
</ruby>

TIP: 순수한 텍스트로만으로 이루어진 응답을 렌더링하는 것은 HTML외에 다른 무언가를 기대하는 AJAX나 웹서비스 요청에 대한 응답을 보낼 때 가장 유용합니다. 

NOTE: 기본적으로, +:text+ 옵션을 이용하면 현재의 레이아웃을 사용하지 않은 채 텍스트를 렌더링하게 됩니다. 레이아웃를 적용해서 텍스트를 렌더링하고자 한다면 +:layout => true+ 옵션을 추가하기 바랍니다.

h5(#Rendering-JSON). JSON 렌더링하기

JSON은 다수의 AJAX 라이브러리에서 사용하는 자바스크립트 데이터 포맷을 말합니다. 레일스는 객체를 JSON으로 변환하고 JSON을 브라우저로 렌더링하는 것을 지원합니다.:

<ruby>
render :json => @product
</ruby>

TIP: 렌더링하고 하는 객체에 대해서 +to_json+ 을 호출할 필요가 없습니다. +:json+ 옵션을 사용하면 렌더링시 자동으로 +to_json+ 을 호출하게 됩니다.

h5(#Rendering-XML). XML 렌더일하기

레일스는 또한 객체를 XML로 변환하고 호출자에게 XML을 렌더링해서 보내도록 지원합니다:

<ruby>
render :xml => @product
</ruby>

TIP: 렌더링하고자 하는 객체에 대해서 +to_xml+ 을 호출할 필요가 없습니다. +:xml+ 옵션을 사용하면 +render+ 메소드가 자동으로 +to_xml+ 호출하게 됩니다.

h5(#Rendering-Vanilla-JavaScript). 기본 자바스크립트를 렌더링하기

레일스는 순수 자바스트립트를 렌더링할 수 있습니다:

<ruby>
render :js => "alert('Hello Rails');"
</ruby>

이것은 +text/javascript+ MIME 형태의 해당 문자열을 브라우저로 전송하게 될 것입니다.

h5(#Options-for-render). +render+ 메소드 옵션

일반적으로 +render+ 메소드를 호출시에 4가지 옵션을 지정할 수 있습니다:

* +:content_type+
* +:layout+
* +:status+
* +:location+

h6(#The-content-type-Option). +:content_type+ 옵션

기본적으로, 레일스는 렌더링 작업의 결과를 +text/html+ MIME형(또는 +:json+ 옵션을 사용할 경우에는 +application/json+, +:xml+ 옵션을 사용할 경우에는 +application/xml+ 형으로 제공하게 됩니다.)으로 제공하게 됩니다. 이와 같이 MIME 형을 변경하고자 할 경우에, +:content_type+ 옵션을 설정하면 가능하게 됩니다:

<ruby>
render :file => filename, :content_type => "application/rss"
</ruby>

h6(#The-layout-Option). +:layout+ 옵션

+render+ 메소드 대부분의 옵션은 그 결과물을 현재의 레이아웃의 일부분으로 보이게 합니다. 본 가이드의 뒷부분에서 레이아웃과 그 사용법에 대해서 배우게 될 것입니다.

+:layout+ 옵션을 사용하면 레일스가 현재 액션에 대한 레이아웃으로 특정 파일을 사용하도록 알려줍니다:

<ruby>
render :layout => "special_layout"
</ruby>

또한 레일스에게 레이아웃을 전혀 사용하지 않도록 지시할 수도 있습니다:

<ruby>
render :layout => false
</ruby>

h6(#The-status-Option). The +:status+ Option

레일스는 자동으로 정확한 HTTP 상태코드(대부분의 경우 응답시 +200 OK+ 를 보내게 됩니다)와 함께 응답을 생성하게 됩니다.  +:status+ 옵션을 사용하면 이 값을 변경할 수 있습니다:

<ruby>
render :status => 500
render :status => :forbidden
</ruby>

레일스는 상태코드로 숫자와 심볼 모두 인식합니다.

h6(#The-location-Option). +:location+ 옵션

+:location+ 옵션을 사용하면 HTTP +Location+ 헤더를 설정할 수 있습니다:

<ruby>
render :xml => photo, :location => photo_url(photo)
</ruby>

h5(#Finding-Layouts). 레이아웃 파일의 위치찾기

현재의 레이아웃 파일의 위치를 찾기 위해, 레일스는 +app/views/layouts+ 디렉토리에서 해당 컨트롤러와 같은 이름을 가진 파일을 찾아보게 됩니다. 예를 들면, +PhotosController+ 클래스의 액션을 렌더링할 때 +app/views/layouts/photos.html.erb+ 또는 +app/views/layouts/photos.builder+ 를 사용하게 됩니다. 만약 해당 컨트롤러 전용 레이아웃이 없을 경우에는, 레일스는 +app/views/layouts/application.html.erb+ 또는 +app/views/layouts/application.builder+ 를 이용하게 됩니다. +.erb+ 레이아웃이 없을 경우에는 +.builder+ 레이아웃이 있을 경우 그것을 사용할 것입니다. 레일스는 또한 각각의 컨트롤러와 액션에 대해서 좀 더 세밀한 전용 레이아웃을 제공하는 다양한 방법을 제공해 줍니다.

h6(#Specifying-Layouts-for-Controllers). 컨트롤러 전용 레이아웃 지정하기

컨트롤러에서 +layout+ 선언을 해 줌으로써 컨트롤러에서의 자동 레이아웃 규칙을 변경할 수 있습니다. 예를 들면:

<ruby>
class ProductsController < ApplicationController
  layout "inventory"
  #...
end
</ruby>

이렇게 선언해 줌으로써, +ProductsController+ 에 있는 모든 액션들은 자신의 레이아웃으로 +app/views/layouts/inventory.html.erb+ 를 사용하게 될 것입니다.

전체 어플리케이션에 대한 별도의 레이아웃을 할당하고자 할 때는, +ApplicationController+ 클래스에 레이아웃 선언을 추가해 주면 됩니다:

<ruby>
class ApplicationController < ActionController::Base
  layout "main"
  #...
end
</ruby>

이렇게 선언해 주면, 어플리케이션 내의 모든 뷰는 자신의 레이아웃으로 +app/views/layouts/main.html.erb+ 를 사용하게 될 것입니다.

h6(#Choosing-Layouts-at-Runtime). 런타임시 레이아웃 선택하기

심볼을 이용하면 요청이 처리될 때까지 레이아웃 선택을 연기할 수 있습니다:

<ruby>
class ProductsController < ApplicationController
  layout "products_layout"

  def show
    @product = Product.find(params[:id])
  end

  private
    def products_layout
      @current_user.special? ? "special" : "products"
    end

end
</ruby>

이제, 현재 사용자가 special한 경우, 하나의 제품 정보를 볼 때 special 레이아웃이 적용될 될 것입니다.

또한 Proc와 같은 인라인 메소드를 이용해서 레이아웃을 결정할 수도 있습니다. 예를 들면, Proc 객체를 넘겨 줄 경우에는, +controller+ 인스턴스를 블록변수로 넘겨 현재 요청된 상황에 따라 레이아웃을 결정할 수 있습니다. 예를 들면:

<ruby>
class ProductsController < ApplicationController
  layout Proc.new { |controller| controller.request.xhr? ? "popup" : "application" }
end
</ruby>

여기서 +controller.request.xhr?+ 은 해당 컨트롤러가 ajax 요청을 받았는지를 알아보기 위해 사용합니다.

h6(#Conditional-Layouts). 조건 레이아웃

컨트롤러 레벨의 레이아웃에 +:only+ 와 +:except+ 옵션을 이용할 수 있으며, 컨트롤러 내의 메소드명에 해당하는 하나의 메소드나 하나이상의 메소드로 구성된 배열을 지정할 수 있습니다:

<ruby>
class ProductsController < ApplicationController
  layout "product", :except => [:index, :rss]
end
</ruby>

이렇게 선언하면, +rss+ 와 +index+ 를 제외한 모든 메소드에 대해서 +product+ 레이아웃이 적용될 것입니다. 

h6(#Layout-Inheritance). 레이아웃의 상속

레이아웃은 계층구조에서 하향 공유되기 때문에 전용 레이아웃은 범용 레이아웃에 우선하게 됩니다. 예를 들면:

* +application_controller.rb+

<ruby>
class ApplicationController < ActionController::Base
  layout "main"
end
</ruby>

* +posts_controller.rb+

<ruby>
class PostsController < ApplicationController
end
</ruby>

* +special_posts_controller.rb+

<ruby>
class SpecialPostsController < PostsController
  layout "special"
end
</ruby>

* +old_posts_controller.rb+

<ruby>
class OldPostsController < SpecialPostsController
  layout false

  def show
    @post = Post.find(params[:id])
  end

  def index
    @old_posts = Post.older
    render :layout => "old"
  end
  # ...
end
</ruby>

이 어플리케이션에서:

* 보통은 뷰가 +main+ 레이아웃에서 렌더링될 것입니다.
* +PostsController#index+ 는 +main+ 레이아웃을 사용할 것입니다.
* +SpecialPostsController#index+ 는 +special+ 레이아웃을 사용할 것입니다.
* +OldPostsController#show+ 는 레이아웃을 전혀 사용하지 않을 것입니다.
* +OldPostsController#index+ 는 +old+ 레이아웃를 사용할 것입니다.

h5(#Avoiding-Double-Render-Errors). 이중 렌더링 에러 방지하기

조만간, 대부분의 레일스 개발자들은 "액션당 한번의 렌더링 또는 리디렉션을 할 수 있습니다(Can only render or redirect once per action)"라는 에러 메시지를 접하게 될 것입니다. 성가신 일이긴 하지만, 비교적 쉽게 에러를 잡을 수 있습니다. 이것은 대개가 +render+ 가 작업하는 방식을 잘 못 이해하기 때문에 일어나는 일입니다. 

예를 들어, 이러한 에러를 유발하는 코드를 아래에 소개합니다:

<ruby>
def show
  @book = Book.find(params[:id])
  if @book.special?
    render :action => "special_show"
  end
  render :action => "regular_show"
end
</ruby>

+@book.special?+ 이 +true+ 일 경우, 레일스는 +@book+ 변수를 +special_show+ 뷰로 보내어 렌더링 작업을 시작할 것입니다. 그러나 +show+ 액션의 나머지 코드가 실행되어 액션의 마지막까지 도달하게 되어 +regular_show+ 뷰를 렌더링하기 시작할 것이고 이 때 에러를 발생시킬 것입니다. 해결책은 간단합니다. 즉, 단일 코드 경로에서 +render+ 나 +redirect+ 를 한번만 호출하도록 하는 것입니다. 도움이 될 수 있는 코드는 +and return+ 입니다. 아래에 +show+ 메소드의 패치 버전을 볼 수 있습니다:

<ruby>
def show
  @book = Book.find(params[:id])
  if @book.special?
    render :action => "special_show" and return
  end
  render :action => "regular_show"
end
</ruby>

여기서 +&amp;&amp; return+ 이 아니라 +and return+ 을 사용해야 하는데, 후자의 경우는 작동하지만, 전자의 경우는 루비 언어의 연사자 우선법칙 때문에 동작을 하지 않기 때문입니다.

주의할 것은 +ActionController+ 가 묵시적으로 행하는 렌더링이 +render+ 가 호출되었는지를 확인한다는 것입니다. 그래서 이러한 에러를 피할 수 있는 것입니다. 그러므로, 아래의 코드는 에러없이 작동할 것입니다:

<ruby>
def show
  @book = Book.find(params[:id])
  if @book.special?
    render :action => "special_show"
  end
end
</ruby>

이것은 +special?+ book을 +special_show+ 템플릿을 이용하여 렌더링하지만, 다른 book들은 디폴트 +show+ 템플릿을 이용하여 렌더링할 것입니다.

h4(#Using-redirect-to). +redirect_to+ 사용하기

HTTP 요청에 대한 응답을 처리하는 또 다른 방법으로는 +redirect_to+ 가 있습니다. 보아왔듯이, +render+ 는 레일스에게 응답을 생성할 때 어떤 뷰나 기타 다른 자원을 사용할 지를 알려주게 됩니다. 그러나, +redirect_to+ 메소드는 완전히 다른 방식으로 동작합니다. 즉, 브라우저에게 다른 URL로 요청을 다시 할 것을 알려 줍니다. 예를 들면, 아래와 같이 호출할 경우, 코드 상의 현재의 위치에서 어플리케이션 내의 photo 인덱스로 리디렉트 할 수 있습니다:

<ruby>
redirect_to photos_url
</ruby>

+link_to+ 또는 +url_for+ 메소드에서 사용하는 인수를 +redirect_to+ 메소드에서도 사용할 수 있습니다. 또한, 특수한 리디렉트가 있어서 사용자를 이전 페이지로 돌아가게 할 수 있습니다:

<ruby>
redirect_to :back
</ruby>

h5(#Getting-a-Different-Redirect-Status-Code). 다른 리디렉트 상태코드 구하기

+redirect_to+ 메소드를 호출하면 레일스는 HTTP 상태코드값으로  302(temporary redirect)를 보내게 됩니다. 만약 permanent redirect를 의미하는 다른 상태코드값 301을 사용하고자 한다면, +:status+ 옵션을 사용하면 됩니다:

<ruby>
redirect_to photos_path, :status => 301
</ruby>

+render+ 의 +:status+ 옵션과 같이, +redirect_to+ 에 대한 +:status+ 옵션도 헤더 표시를 위해 숫자와 심볼을 모두 사용할 수 있습니다. 

h5(#The-Difference-Between-render-and-redirect_to). +render+ 와 +redirect_to+ 의 차이점

가끔 경험이 없는 개발자들은 +redirect_to+ 메소드를 +goto+ 명령처럼 생각해서 레일스 코드상의 한 위치에서 다른 위치로 실행위치를 옮기는 것으로 생각합니다. 이것은 옳지 않습니다. +redirect_to+ 메소드는 실행을 멈추고 브라우저로부터의 새로운 요청을 기다리게 됩니다. 브라우저에게 HTTP 302 상태코드값을 보내어 다음에 요청해야할 것을 알려주게 됩니다.

두 메소드 간의 차이를 알아 보기 위해 다음 액션을 보기 바랍니다:

<ruby>
def index
  @books = Book.all
end

def show
  @book = Book.find_by_id(params[:id])
  if @book.nil?
    render :action => "index"
  end
end
</ruby>

이러한 형태의 코드에서는, +@book+ 변수값이 +nil+ 일 경우 문제가 발생합니다. +render :action+ 은 대상 액션의 코드를 전형 실행하지 않고 뷰 템플릿만 렌더링한다는 것을 기억한다면 +index+ 뷰에서 사용할 +@books+ 변수가 어떠한 값도 할당되지 않음을 이해할 수 있을 것입니다. 이러한 문제를 교정하는 한가지 방법은 렌더링 대신에 리디렉트를 사용한 것입니다:

<ruby>
def index
  @books = Book.all
end

def show
  @book = Book.find_by_id(params[:id])
  if @book.nil?
    redirect_to :action => :index
  end
end
</ruby>

이 코드에서는, 브라우저가 인덱스 페이지에 대한 새로운 요청을 하고, +index+ 메소드에 있는 코드가 실행되면 결국 전체적으로 문제없이 작동하게 될 것입니다. 

이 코드상의 유일한 단점은 브라우저로 되돌아 간다는 것입니다. 즉, 브라우저가 +/books/1+ 과 함께 +show+ 액션을 요청하고, 컨트롤러는 해당하는 book이 없다는 것을 알게 되어 컨트롤러는 요청한 브라우저에게 +/books/+ 로 가라는 302 리디렉트를 보내게 됩니다. 이 때 브라우저는 컨트롤러에게 +index+ 액션을 수행하도록 새로운 요청을 보내게 되며, 컨트롤러는 데이터베이스에 있는 모든 books를 불러와 +index+ 템플릿으로 렌더링한 후 사용자의 스크린상에 보여주게 될 응답내용을 브라우저로 보내게 됩니다. 

작은 어플리케이션에서는 이러한 시간 지체가 문제가 되지 않겠지만, 응답속도가 필수적인 상황에서는 이러한 처리방법을 재고해야할 것입니다. 아래의 예를 보면 이러한 이중 요청을 방지하는 조치를 알게 될 것입니다:

<ruby>
def index
  @books = Book.all
end

def show
  @book = Book.find_by_id(params[:id])
  if @book.nil?
    @books = Book.all
    render "index", :alert => "Your book was not found!"
  end
end
</ruby>

이것은 해당 book이 없을 경우 데이터베이스에서 모든 books를 가져와 +@books+ 인스턴스 변수에 할당하게 되고, 사용자에게 현재 상황을 알려주는 경고 메시지와 함께, 바로 +index.html.erb+ 템플릿을 렌더링하여 브라우저로 보내게 됩니다. 

h4(#Using-head-To-Build-Header-Only-Responses). +head+ 를 이용하여 헤더만을 응답으로 보내기

+head+ 메소드는 브라우저로 헤더값만 응답내용으로 보내고자 할 때 사용할 수 있습니다. 이것은 +render :nothing+ 를 호출하는 것보다는 더 확실하게 대안을 제공해 줍니다. +head+ 메소드는 헤더명과 값을 가지는 하나의 해쉬형태로 하나의 파라미터를 취하게 됩니다. 예를 들면, 다음과 같이 에러 헤더값만 응답으로 보낼 수 있습니다:

<ruby>
head :bad_request
</ruby>

이것은 다음과 같은 헤더를 만들어 낼 것입니다:

<shell>
HTTP/1.1 400 Bad Request
Connection: close
Date: Sun, 24 Jan 2010 12:15:53 GMT
Transfer-Encoding: chunked
Content-Type: text/html; charset=utf-8
X-Runtime: 0.013483
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache
</shell>

또는 다른 HTTP 헤더를 사용해서 추가 정보를 보낼 수도 있습니다:

<ruby>
head :created, :location => photo_path(@photo)
</ruby>

이것은 다음과 같은 결과를 보여 줄 것니다:

<shell>
HTTP/1.1 201 Created
Connection: close
Date: Sun, 24 Jan 2010 12:16:44 GMT
Transfer-Encoding: chunked
Location: /photos/1
Content-Type: text/html; charset=utf-8
X-Runtime: 0.083496
Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
Cache-Control: no-cache
</shell>

h3(#Structuring-Layouts). 레이아웃 구조화하기

레일스는 요청에 대한 응답으로 뷰를 렌더링할 때, 뷰 템플릿과 레이아웃을 합성해서 만들어 냅니다. 레이아웃 안에서는 여러 개의 결과물을 합성해서 전체 응답을 만들기 위해 세가지 툴을 사용할 수 있습니다:

* Asset tags
* +yield+ and +content_for+
* Partials

h4(#Asset-Tag-Helpers). Asset 태그 헬퍼메소드

asset 태그는 피드, 자바스크립트, 스타일시트, 이미지, 비디오, 또는 오디오를 뷰와 연결하는 HTML 코드를 생성하는 메소드를 제공합니다:

* +auto_discovery_link_tag+
* +javascript_include_tag+
* +stylesheet_link_tag+
* +image_tag+
* +video_tag+
* +audio_tag+

+auto_discovery_link_tag+, +javascript_include_tag+, +stylesheet_link_tag+ 는 대부분 레이아웃 파일의 +&lt;head&gt;+ 섹션 내에서 사용되긴 하지만, 이러한 태그들은 레이아웃 파일이나 뷰 템플릿에서 사용할 수 있습니다. 

WARNING: asset 태그 헬퍼메소드는 지정된 위치에 asset이 존재하는지에 대한 _확인을 하지 않습니다._ 즉 단순히 개발자가 무엇을 할 것인지를 알고 있다고 가정하고 링크를 생성합니다.

h5(#Linking-to-Feeds-with-the-auto_discovery_link_tag). +auto_discovery_link_tag+ 를 피드로 연결하기

+auto_discovery_link_tag+ 헬퍼는 대부분의 브라우저와 뉴스리더가 RSS 또는 ATOM 피드 서비스를 검출하는데 사용하는 HTML을 만들어 줍니다. 이것은 링크형태(+:rss+ 나 +:atom+), url_for로 넘겨주게 되는 해쉬형태의 옵션, 그리고 태그를 위한 옵션해쉬 값을 인수로 취합니다:

<erb>
<%= auto_discovery_link_tag(:rss, {:action => "feed"},
  {:title => "RSS Feed"}) %>
</erb>

+auto_discovery_link_tag+ 의 태그 옵션에는 3가지가 있습니다:

* +:rel+ 은 링크에서 +rel+ 값을 지정합니다. 기본 값은 "alternate"입니다.
* +:type+ 은 MIME 형을 지정합니다. 레일스는 적정한 MIME형을 자동으로 만들어 줍니다.
* +:title+ 은 링크의 title 속성값을 지정합니다. 기본값은 대문자 +:type+ 값이며 예를 들면, "ATOM" 또는 "RSS" 등입니다.

h5(#Linking-to-JavaScript-Files-with-the-javascript_include_tag). +javascript_include_tag+ 로 자바스크립트 파일 연결하기

+javascript_include_tag+ 헬퍼는 각 소스에 대한 HTML +script+ 태그를 반환해 줍니다. 

"Asset Pipeline":asset_pipleline.html 이 작동하는 상태에서 레일스를 사용한다면, 이 헬퍼메소드는 이전 레일스 버전에서 사용되었던 +public/javascripts+ 폴더가 아니라 +/assets/javascripts/+ 로의 링크를 만들어 줄 것입니다. 이 링크는 레일스 3.1에서 도입된 Sprockets 젬에 의해서 서비스됩니다. 

레일스 어플리케이션이나 레일스 엔진내에서 자바스크립트 파일은 3군데 중의 하나에 위치하게 됩니다. 즉, +app/assets+, +lib/assets+, +vender/assets+ 입니다. 이들 위치에 대해서는 "Asset Organization section in the Asset Pipeline Guide":asset_pipeline.html#asset-organization 에서 자세하게 설명할 것입니다.

도큐먼트 루트에 대한 상대경로 또는 기호에 따라 URL을 지정할 수도 있습니다. 예를 들면, +app/assets+, +lib/assets+, +vender/assets+ 디렉토리 중의 하나에 +javascripts+ 라는 이름을 가진 디렉토리에 존재하는 특정 자바스크립트 파일로 링크를 만들기 위해서는 다음과 같이 할 수 있습니다:

<erb>
<%= javascript_include_tag "main" %>
</erb>

그러면, 레일스가 다음과 같이 +script+ 태그를 작성해 줄 것입니다:

<html>
<script src='/assets/main.js'></script>
</html>

이 assets에 대한 요청이 들어오게 되면 이제 Sprockets 젬이 알아서 처리하게 됩니다. 

동시에 +app/assets/javascripts/main.js+ 와 +app/assets/javascripts/columns.js+ 와 같이 여러 개의 파일을 포함하고자 한다면 다음과 같이 지정할 수 있습니다:

<erb>
<%= javascript_include_tag "main", "columns" %>
</erb>

+app/assets/javascripts/main.js+ 와 +app/assets/javascripts/photos/columns.js+ 파일을 포함하기 위해서는:

<erb>
<%= javascript_include_tag "main", "/photos/columns" %>
</erb>

+http://example.com/main.js+ 와 같이 URL을 포함하기 위해서는:

<erb>
<%= javascript_include_tag "http://example.com/main.js" %>
</erb>

어플리케이션이 asset pipeline을 사용하지 않는다면, +:defaults+ 옵션을 사용해서 기본적으로 jQuery를 로드할 수 있습니다:

<erb>
<%= javascript_include_tag :defaults %>
</erb>

그러면, 다음과 같이 +script+ 태그가 만들어집니다:

<html>
<script src="/javascripts/jquery.js"></script>
<script src="/javascripts/jquery_ujs.js"></script>
</html>

어플리케이션이 asset pipeline을 사용하지 않을 경우, jQuery를 사용하기 위한 두개의 파일, +jquery.js+ 와 +jquery_ujs.js+ 가 +public/javascript+ 디렉토리에 위치해야 합니다. 이 파일들은 "jquery-rails repository on GitHub":https://github.com/indirect/jquery-rails/tree/master/vendor/assets/javascripts 에서 다운로드 받을 수 있습니다. 

WARNING: 그러나, 만약, asset pipeline을 사용할 경우라면, 이 태그는 +defaults.js+ 라는 asset에 대해서 +script+ 를 만들게 되지만, 명시적으로 그 파일을 만들어 놓지 않은 상태라면 실제로는 어플리케이션에 존재하지 않게 됩니다. 

그리고, 어떤 경우라도 <tt>config/application.rb</tt> 파일에서 +:defaults+ 확장을 변경할 수 있습니다:

<ruby>
config.action_view.javascript_expansions[:defaults] = %w(foo.js bar.js)
</ruby>

물론, 새로운 defaults 이름을 정의할 수도 있습니다:

<ruby>
config.action_view.javascript_expansions[:projects] = %w(projects.js tickets.js)
</ruby>

그리고 +:defaults+ 와 똑같이 그것을 참조하여 사용하면 됩니다:

<erb>
<%= javascript_include_tag :projects %>
</erb>

<tt>:defaults</tt>를 사용할 때, <tt>public/javascripts</tt> 디렉토리에 <tt>application.js</tt> 파일이 존재한다면, 그 파일도 마찬가지로 마지막에 포함될 것입니다.

또한, asset pipeline을 사용하지 않는 경우라면, +:all+ 확장으로 +public/javascripts+ 디렉토리에 있는 모든 자바스크립트 파일을 로드하게 됩니다:

<erb>
<%= javascript_include_tag :all %>
</erb>

주목할 것은, 선택된 defaults가 최우선으로 포함되므로, 차후에 포함되는 모든 파일에서 사용가능하게 된다는 것입니다.

+:recursive+ 옵션을 추가하면 +public/javascript+ 의 하위 폴더에 있는 파일들도 로드할 수 있게 됩니다:

<erb>
<%= javascript_include_tag :all, :recursive => true %>
</erb>

여러 개의 자바스크립트 파일을 로딩할 것이라면, 여러 개의 파일들을 하나의 파일로 합쳐서 다운로드할 수 있게 하여 사용자 경험을 더 좋게 할 수 있습니다. 운영서버 환경에서 이렇게 하기 위해서는 +javascript_include_tag+ 에 +:cache => true+ 옵션을 지정해 주면 됩니다:

<erb>
<%= javascript_include_tag "main", "columns", :cache => true %>
</erb>

기본적으로, 합쳐진 파일은 javascripts/all.js 파일로 전달될 것입니다. +:cache+ 옵션에 +true+ 값 대신에, 캐시될 asset 파일의 위치를 지정할 수도 있습니다:

<erb>
<%= javascript_include_tag "main", "columns",
  :cache => "cache/main/display" %>
</erb>

이 때 +cache/#{current_site}/main/display+ 와 같이 동적경로를 지정할 수 있습니다.

h5(#Linking-to-CSS-Files-with-the-stylesheet_link_tag). +stylesheet_link_tag+ 로 CSS 파일 연결하기

+stylesheet_link_tag+ 헬퍼는 각 소스파일에 대해서 HTML +&lt;link&gt;+ 태그를 리턴해 줍니다.

"Asset Pipeline"을 이용하여 레일스를 사용한다면, 이 헬퍼메소드는 +/assets/stylesheets/+ 디렉토리로의 링크를 만들어 줄 것입니다. 이후에 이 링크는 Sprockets 젬이 알아서 처리하게 됩니다. 하나의 스타일시트 파일은 +app/assets+, +lib/assets+, +vender/assets+ 세개의 디렉토리 중의 하나에 저장될 수 있습니다.

도큐먼트 루트에 대한 전체 상대경로, 즉 URL을 명시할 수 있다. 예를 들면, +app/assets+, +lib/assets+ 또는 +vendor/assets+ 디렉토리 중의 하나에 있는 +stylesheets+ 디렉토리 내부에 위치하는 스타일시트 파일로 연결하기 하기 위해서 다음과 같이 할 수 있습니다:

<erb>
<%= stylesheet_link_tag "main" %>
</erb>

+app/assets/stylesheets/main.css+ 과 +app/assets/stylesheets/columns.css+ 파일을 포함하기 위해서는 아래와 같이 해주면 됩니다:

<erb>
<%= stylesheet_link_tag "main", "columns" %>
</erb>

+app/assets/stylesheets/main.css+ 과 +app/assets/stylesheets/photos/columns.css+ 파일을 포함하기 위해서는 다음과 같이 하면 됩니다:

<erb>
<%= stylesheet_link_tag "main", "/photos/columns" %>
</erb>

또한 +http://example.com/main.css+ 을 포함하기 위해서는 다음과 같이 합니다:

<erb>
<%= stylesheet_link_tag "http://example.com/main.css" %>
</erb>

디폴트로 +stylesheet_link_tag+ 는 +media=”screen” rel=”stylesheet”+ 옵션으로 링크를 만들어 줍니다. 그러나 +:media+, +:rel+ 옵션을 추가로 지정하여 디폴트 설정을 변경할 수 있습니다:

<erb>
<%= stylesheet_link_tag "main_print", :media => "print" %>
</erb>

asset pipeline을 사용하지 않는 경우, +:all+ 옵션은 +public/stylesheets+ 폴더내에 있는 모든 CSS 파일을 링크합니다:

<erb>
<%= stylesheet_link_tag :all %>
</erb>

+:recursive+ 옵션을 사용해서 +public/stylesheets+ 하부폴더에 있는 파일들도 링크할 수 있습니다:

<erb>
<%= stylesheet_link_tag :all, :recursive => true %>
</erb>

여러 개의 CSS 파일을 링크할 경우, 이들을 합쳐 하나의 파일로 다운로드할 수 있도록 하여 사용자 경험을 더 좋게 만들 수 있습니다. 운영서버에서 +stylesheet_link_tag+ 에 +:cache => true+ 옵션을 명시하면 가능해 집니다:

<erb>
<%= stylesheet_link_tag "main", "columns", :cache => true %>
</erb>

디폴트로 합쳐진 파일은 +stylesheets/all.css+ 파일로 전달됩니다. 대신에 캐쉬 asset 파일의 위치를 지정할 수도 있습니다:

<erb>
<%= stylesheet_link_tag "main", "columns",
  :cache => "cache/main/display" %>
</erb>

또한, +cache/#{current_site}/main/display+ 와 같이 동적인 경로지정도 할 수 있습니다.

h5(#Linking-to-Images-with-the-image_tag). +image_tag+ 로 이미지로 연결하기

+image_tag+ 헬퍼는 명시된 파일로 HTML +&lt;img /&gt;+ 태그를 만들어 줍니다. 디폴트로 파일은 +public/images+ 폴더로부터 로드됩니다.

WARNING: 이미지의 확장자를 명시해 주어야 합니다. 레일스의 이전 버전에서는 이미지 이름만 사용해도 확장자가 없는 경우 +.png+ 를 자동으로 붙여 주었지만, 레일스 3.0 부터는 그렇지 않게 되었습니다.

<erb>
<%= image_tag "header.png" %>
</erb>

원할 경우 다음과 같이 이미지 경로를 지정할 수도 있습니다:

<erb>
<%= image_tag "icons/delete.gif" %>
</erb>

HTML 옵션을 해쉬형태로 지정하여 추할 수도 있습니다:

<erb>
<%= image_tag "icons/delete.gif", {:height => 45} %>
</erb>

또한, mouseover시 보여질 이미지를 지정할 수 있습니다:

<erb>
<%= image_tag "home.gif", :onmouseover => "menu/home_highlight.gif" %>
</erb>

사용자가 브라우저의 이미지 옵션을 해지했을 때 이미지 대신 보여질 텍스트를 제공할 수 있습니다. alt 텍스트 속성값을 지정하지 않을 경우에는, 해당 파일의 파일명을 확장자 없이 보여주게 됩니다. 예를 들어, 다음의 두개의 이미지 태그는 같은 코드를 리턴해 줍니다:

<erb>
<%= image_tag "home.gif" %>
<%= image_tag "home.gif", :alt => "Home" %>
</erb>

이미지의 크기를 "{넓이}x{높이}" 형태로 지정할 수 있습니다:

<erb>
<%= image_tag "home.gif", :size => "50x20" %>
</erb>

이미 언급했던 태그 외에도 +:class+, +:id+, 또는 +:name+ 과 같은 표준 HTML 옵션을 추가할 수 있습니다:

<erb>
<%= image_tag "home.gif", :alt => "Go Home",
                          :id => "HomeImage",
                          :class => "nav_bar" %>
</erb>

h5(#Linking-to-Videos-with-the-video_tag). +video_tag+ 로 비디오 파일 연결하기

+video_tag+ 헬퍼는 지정 비디오 파일을 연결하는 HTML 5 의 +&lt;video&gt;+ 태그를 생성합니다. 디폴트로 비디오 파일은 +public/videos+ 폴더로부터 로드됩니다.

<erb>
<%= video_tag "movie.ogg" %>
</erb>

이것은 다음과 같이 렌더링됩니다.

<erb>
<video src="/videos/movie.ogg" />
</erb>

+image_tag+ 와 같이 소스에 대한 경로를 +public/videos+ 디렉토리에 대한 절대 또는 상대경로로 지정할 수 있습니다. 또한, image_tag 와 같이 +:size => "#{넓이}x#{높이}"+ 옵션을 지정할 수 있습니다. 비디오 태그는 마지막에 id, class 등 HTML 옵션을 지정할 수도 있습니다.

또한 비디오 태그는 다음과 같은 HTML 옵션 해시를 이용하여 모든 +&lt;video&gt;+ HTML 옵션을 지원합니다:

* +:poster => "image_name.png"+ 는 비디오가 시작되기 전에 비디오 대신 보여주는 이미지를 제공합니다.
* +:autoplay => true+ 는 페이지가 로드될 때 자동으로 비디오가 시작되도록 합니다.
* +:loop => true+ 는 비디오가 반복해서 플레이되도록 합니다.
* +:controls => true+ 는 사용자가 비디오와 상호작용을 할 수 있도록 브라우져 상에 컨트롤을 제공합니다.
* +:autobuffer => true+ 는 페이지가 로드될 때 사용자를 위해 비디오를 미리 로드합니다.

+video_tag+ 에 한개 이상의 비디오 파일을 배열로 넘겨 주어 여러 개의 비디오를 볼 수 있도록 합니다:

<erb>
<%= video_tag ["trailer.ogg", "movie.ogg"] %>
</erb>

이것은 다음과 같이 렌더링됩니다:

<erb>
<video><source src="trailer.ogg" /><source src="movie.ogg" /></video>
</erb>

h5(#Linking-to-Audio-Files-with-the-audio_tag). +audio_tag+ 로 오디오 파일 연결하기

+audio_tag+ 헬퍼는 지정된 오디오 파일을 HTML 5 의 +&lt;audio&gt;+ 태그로 연결합니다. 디폴트로 이 오디오 파일들은 +public/audios+ 폴더에서 로드됩니다.

<erb>
<%= audio_tag "music.mp3" %>
</erb>

다음과 같이 오디오 파일에 대한 경로를 지정할 수도 있습니다:

<erb>
<%= audio_tag "music/first_song.mp3" %>
</erb>

+:id+, +:class+ 등 추가 옵션을 해쉬형태로 지정할 수도 있습니다.

Like the +video_tag+, the +audio_tag+ has special options:

* +:autoplay => true+ 는 페이지 로도시에 오디오 파일이 자동으로 시작되도록 합니다.
* +:controls => true+ 는 사용자가 오디오와 상호작용하기 위한 컨트롤을 브라우져 상에 보이게 해 줍니다.
* +:autobuffer => true+ 는 페이지가 로드될 때 사용자들을 위해 오디오 파일을 미리 로드되도록 합니다.

h4(#Understanding-yield). +yield+ 이해하기

레이아웃 상에서, +yield+ 는 뷰로부터 만들어지는 내용을 삽입할 장소를 지정합니다. 가장 간단한 방법은, 렌더링되는 뷰의 전체 내용물을 삽입할 곳에 한개의 +yield+ 를 두도록 하는 것입니다:

<erb>
<html>
  <head>
  </head>
  <body>
  <%= yield %>
  </body>
</html>
</erb>

한개 이상의 +yield+ 영역을 지정할 수도 있습니다:

<erb>
<html>
  <head>
  <%= yield :head %>
  </head>
  <body>
  <%= yield %>
  </body>
</html>
</erb>

뷰 템플릿의 주내용은 반드시 무명(無名)의 +yield+ 위치로 렌더링될 것입니다. 그러나 한개 이상의 +yield+ 를 지정할 때 추가 지정되는 +yield+ 위치에는 이름을 붙여야 하는데 이 때 해당 이름에 대한 내용물을 만들기 위해 +content_for+ 메소드를 이용합니다.

h4(#Using-the-content_for-Method). +content_for+ 메소드 이용하기

+content_for+ 메소드는 레아이웃 상의 특정 이름을 가진 +yield+ 블록으로 내용물을 삽입할 수 있도록 해줍니다. 예를 들어, 아래의 뷰는 방금 전에 보여 주었던 레이아웃과 함께 동작할 것입니다:

<erb>
<% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>
</erb>

이 페이지를 렌더링하여 레이아웃에 제공하게 될 HTML은 다음과 같은 것입니다:

<erb>
<html>
  <head>
  <title>A simple page</title>
  </head>
  <body>
  <p>Hello, Rails!</p>
  </body>
</html>
</erb>

이러한 content_for 메소드는 레이아웃이, 자체 컨텐츠 블록을 삽입하는 sidebar 또는 footer 와 같은 특정 영역을 가질 때 매우 도움이 됩니다. 또한 일반 레이아웃의 헤더에 특정 페이지에만 적용되는 자바스크립트나 스타일시트 파일을 로드하는 태그를 삽입할 때도 유용합니다.

h4(#Using-Partials). Partial 이용하기

줄여서 "partial" 이라고 부르는 partial 템플릿은 렌더링 과정을 더 다루기 쉽도록 작은 조각으로 나누는 또 다른 도구입니다. partial 을 이용하면 요청에 대한 응답 중 특정 부분을 렌더링하는 코드를 파일로 옮길 수 있습니다.

h5(#Naming-Partials). Partial 명명하기

partial 을 뷰의 일부분으로 렌더링하기 위해서는 뷰 내에서 +render+ 메소드를 사용하면 됩니다:

<ruby>
<%= render "menu" %>
</ruby>

이것은 해당 뷰가 렌더링될 때 +_menu.html.erb+ 파일이 렌더링되도록 합니다. 여기서 주목할 것은 파일 이름 앞에 있는 밑줄 문자입니다. 레일스에서는 partial 이 밑줄 문자 없이 참조된다고 하더라도 규칙상 partial 파일을 일반 뷰 파일명과 구분하기 위해 밑줄 문자를 사용한다는 것입니다.  이것은 다른 폴더에 있는 partial 을 불러올 때도 동일한 규칙이 적용됩니다.:

<ruby>
<%= render "shared/menu" %>
</ruby>

이 코드는 +app/views/shared/_menu.html.erb+ 파일을 partial 로 불러 오도록 합니다.

h5(#Using-Partials-to-Simplify-Views). Partial 을 이용해서 뷰를 간소화하기

partial을 이용하는 한가지 방법은 전체적인 상황을 더 쉽게 이해할 수 있도록 특정 뷰로부터 자세한 부분을 다른 곳으로 이동시키는 것처럼, partial을 마치 서브루틴처럼 생각하는 것입니다. 예를 들어, 다음과 같은 뷰 파일이 있다고 가정해 봅시다:

<erb>
<%= render "shared/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>
...

<%= render "shared/footer" %>
</erb>

여기서 +_ad_banner.html.erb+ 와 +_footer.html.erb+ partial 은 어플리케이션의 페이지들이 공유하는 내용을 담을 수 있습니다. 특정 페이지에 집중해서 작업을 할 때 이 부분의 자세한 내용을 볼 필요는 없다는 것입니다.

TIP: 어플리케이션의 모든 페이지에서 공유하는 내용에 대해서는 레이아웃에서 직접 partial 을 불러와 사용할 수 있습니다.

h5(#Partial-Layouts). Partial 용 레이아웃

뷰가 레이아웃을 이용할 수 있는 것처럼, partial 도 자신만의 레이아웃을 사용할 수 있습니다. 예를 들어, partial 을 다음과 같이 호출할 수 있습니다:

<erb>
<%= render :partial => "link_area", :layout => "graybar" %>
</erb>

이것은 +_link_area.html.erb+ partial 을  +_graybar.html.erb+ 레이아웃을 이용해서 렌더링하도록 합니다. 여기서 주목할 것은 partial 에 대한 레이아웃도 일반적인 partial 처럼  파일이름 앞에 밑줄 문자를 붙여 사용한다는 것입니다. 따라서 partial 레이아웃은 주 레이아웃이 있는 폴더가 아니라 해당 레이아웃이 속하는 partial 이 있는 동일한 폴더에 있어야 합니다.

또한 주의할 사항은 이와 같이  +:layout+ 옵션을 추가로 사용할 때는 +:partial+ 을 명시해 주어야 한다는 것입니다.

h5(#Passing-Local-Variables). Partial 에 지역변수를 넘겨주기

partial 에 지역변수를 넘겨 줄 수 있어 partial 을 더욱 강력하고 유연하게 만들어 줍니다. 예를 들어, 이를 이용하면 new 와 edit 페이지 간에 각각의 차별요소를 가지면서 중복을 줄일 수 있게 됩니다:

* +new.html.erb+

<erb>
<h1>New zone</h1>
<%= error_messages_for :zone %>
<%= render :partial => "form", :locals => { :zone => @zone } %>
</erb>

* +edit.html.erb+

<erb>
<h1>Editing zone</h1>
<%= error_messages_for :zone %>
<%= render :partial => "form", :locals => { :zone => @zone } %>
</erb>

* +_form.html.erb+

<erb>
<%= form_for(zone) do |f| %>
  <p>
    <b>Zone name</b><br />
    <%= f.text_field :name %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>
</erb>

비록 동일한 partial 이 두개의 뷰로 렌더링되지만, Action View 의 submit 헬퍼는 new 액션에 대해서는 "Create Zone"을, edit 액션에 대해서는 "Update Zone"을 리턴하게 됩니다.

모든 partial 은 기본적으로 밑줄문자를 뺀 partial 이름을 로컬변수명으로 사용할 수 있습니다. +:object+ 옵션을 이용하면 이 로컬변수에 하나의 객체를 넘겨 줄 수 있게 됩니다:

<erb>
<%= render :partial => "customer", :object => @new_customer %>
</erb>

+customer+ partial 내에서 +customer+ 변수는 상위 뷰의 +@new_customer+ 를 참조하게 됩니다.

WARNING: 레일스의 이전 버전에서는, 상위 뷰의 partial과 동일한 이름의 인스턴스 변수를 partial 의 디폴트 지역변수로 찾도록 되어 있었지만, 2.3버전에서 사용되지 않았다가 3.0버전에서는 더 이상 지원하지 않게 되었습니다.

특정 모델의 인스턴스를 partial 로 렌더링할 경우에는 다음과 같이 단축 문법을 사용할 수 있습니다.:

<erb>
<%= render @customer %>
</erb>

+@customer+ 인스턴스 변수가 +Customer+ 모델의 인스턴스를 가지고 있다고 가정한다면, 위의 코드는 +_customer.html.erb+ partial 이용해서 렌더링할 것이고 이 때 상위 뷰에서 접근가능한  +@customer+ 인스턴스 변수를 참조하기 위해 +customer+ 지역변수를 partial 로 넘겨 줄 수 있을 것입니다.

h5(#Rendering-Collections). 컬렉션 렌더링하기

partial 은 컬렉션을 렌더링할 때 매우 유용합니다. +:collection+ 옵션을 이용해서 partial 에 컬렉션을 넘겨 줄 때 컬렉션의 각 멤버에 대해서 partial 이 삽입될 것입니다.:

* +index.html.erb+

<erb>
<h1>Products</h1>
<%= render :partial => "product", :collection => @products %>
</erb>

* +_product.html.erb+

<erb>
<p>Product Name: <%= product.name %></p>
</erb>

컬렉션으로 partial 을 호출하게 되면 partial 은 매번 컬렉션 멤버에 접근하여 partial 이름의 지역변수를 경유하여 렌더링됩니다. 이 경우에 partial 은 +_product+ 이 되고 +_product+ partial 내에서 +product+ 변수를 참조하여 렌더링됩니다.

레일스 3.0에서는 이것에 대한 손쉬운 방법을 제공해 줍니다. +@products+ 가 +product+ 인스턴스의 컬렉션이라고 가정하면 동일한 결과물을 얻기 위해 +index.html.erb+ 에 다음과 같이 코딩할 수 있습니다:

<erb>
<h1>Products</h1>
<%= render @products %>
</erb>

이 때 레일스는 컬렉션에 있는 모델 이름을 찾아보고 partial 이름을 결정하게 됩니다. 사실, 다양한 종류의 모델로부터 만들어진 인스턴스로 구성된 컬렉션을 만들어 동일한 방법으로 렌더링할 수 있는데, 레일스는 컬렉션 각 멤버에 대한 적절한 partial 을 선택하게 될 것입니다:

* +index.html.erb+

<erb>
<h1>Contacts</h1>
<%= render [customer1, employee1, customer2, employee2] %>
</erb>

* +customers/_customer.html.erb+

<erb>
<p>Customer: <%= customer.name %></p>
</erb>

* +employees/_employee.html.erb+

<erb>
<p>Employee: <%= employee.name %></p>
</erb>

이 경우에, 레일스는 컬렉션의 각 멤버에 따라 해당하는 모델의 partial 로서 customer 또는 employee partial을 사용하게 될 것입니다.

컬렉션이 비어있을 때, +render+ 헬퍼는 nil 값을 반환할 것입니다. 따라서 이런 경우에 매우 간단하게 대신해서 제공할 컨텐츠를 작성할 수 있어야 합니다. 

<erb>
<h1>Products</h1>
<%= render(@products) || "There are no products available." %>
</erb>

h5(#Local-Variables). 지역변수

partial 내에서 지역변수 이름을 변경하고자 할 대는 partial 호출시에 +:as+ 옵션을 명시해 주면 됩니다:

<erb>
<%= render :partial => "product", :collection => @products, :as => :item %>
</erb>

With this change, you can access an instance of the +@products+ collection as the +item+ local variable within the partial.

또한 +:locals => { }+ 옵션을 추가하여 렌더링하면 partial 로 임의의 지역변수를 넘겨 줄 수 있게 됩니다:

<erb>
<%= render :partial => "products", :collection => @products,
           :as => :item, :locals => {:title => "Products Page"} %>
</erb>

이것은 로컬변수 +item+ 으로 partial 로 넘어가는 +@products+ 인스턴스 변수의 +product+ 각각에 대해서 +_product.html.erb+ partial 을 렌더링하게 될 것입니다. 이 때 partial로 +title+ 이란 로컬변수에 +Product Page+ 값을 넘겨 주게 됩니다.

TIP: 레일스는 컬렉션이 partial 을 호출할 때 counter 변수를 사용할 수 있게 해 줍니다. 이 변수는 컬렉션 멤버의 이름 뒤에 +_counter+ 를 붙인 형태의 이름을 가지게 됩니다. 예를 들면, +@products+ 를 렌더링할 경우, partial 내에서 +product_counter+ 를 참조하면 partial이 렌더링된 횟수를 알 수 있습니다. 그러나 +:as => :value+ 옵션을 사용해서 partial 을 호출할 경우에는 작동하지 않는다는 것에 주의하기 바랍니다.

+:spacer_template+ 옵션을 이용하면 메인 partial 사이 사이에 렌더링되어 삽입되는 두번째 partial 을 지정할 수 있습니다:

h5(#Spacer-Templates). 구분자(Spacer) 템플릿

<erb>
<%= render :partial => @products, :spacer_template => "product_ruler" %>
</erb>

레일스는 +_product_ruler+ partial 을 +_product+ partial 사이 사이에 어떤 데이터도 넘겨주지 않은 채 렌더링하게 될 것입니다.

h5(#Partial-Layouts). Partial용 레이아웃 이용하기

컬렉션을 렌더링할 때도 +:layout+ 옵션을 이용할 수 있습니다:

<erb>
<%= render :partial => "product", :collection => @products, :layout => "special_layout" %>
</erb>

partial 레이아웃은 컬렉션에 있는 각 항목에 대해서 partial과 함께 렌더링될 것입니다. 현재의 object와 object_counter 변수도 물론 partial에서와 같이 parital 레이아웃에서도 사용할 수 있습니다.

h4(#Using-Nested-Layouts). 중첩 레이아웃 사용하기

경우에 따라 일반 레이아웃과는 다른, 특정 컨트롤러를 지원하는 레이아웃이 필요한 경우가 있을 것입니다. 메인 레이아웃을 복사해서 수정후 사용하기 보다는 (경우에 따라 `sub-template`라고도 불리는) 중첩 레이아웃를 이용할 수 있습니다. 아래에 그 예를 보여줍니다.

+ApplicationController+ 레이아웃이 있다고 가정하면:

* +app/views/layouts/application.html.erb+

<erb>
<html>
<head>
  <title><%= @page_title or "Page Title" %></title>
  <%= stylesheet_link_tag "layout" %>
  <style><%= yield :stylesheets %></style>
</head>
<body>
  <div id="top_menu">Top menu items here</div>
  <div id="menu">Menu items here</div>
  <div id="content"><%= content_for?(:content) ? yield(:content) : yield %></div>
</body>
</html>
</erb>

+NewsController+ 에서 만들어지는 페이지상에서 상단 메뉴를 감추고 오른쪽 메뉴를 보여주고 싶다면:

* +app/views/layouts/news.html.erb+

<erb>
<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end %>
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= content_for?(:news_content) ? yield(:news_content) : yield %>
<% end %>
<%= render :template => "layouts/application" %>
</erb>

이렇게 구현하면 됩니다. News 뷰는 "content" div 안에 있는 상단 메뉴가 사라지고 우측 메뉴가 새로 추가된 새 레이아웃을 사용할 것입니다.

이러한 기법을 이용하면 다양한 서브템플릿으로 같은 결과를 보여줄 수 있는 방법이 많아지게 됩니다. 사실 중첩 레벨에는 제한이 없습니다. +render :template => ''layouts/news'+ 으로 +ActionView::render+ 메소드를 이용하여 +News+ 레아아웃 상에 새로운 레이아웃을 만들 수 있습니다. 만약에 +News+ 레이아웃을 서브템플릿으로 사용하지 않을 경우에는 +content_for?(:news_content) ? yield(:news_content) : yield+ 를 +yield+ 로 대치하기만 하면 됩니다.
