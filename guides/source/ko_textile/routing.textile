h2. 레일스 라우팅

본 가이드에서는 레일스 라우팅의 사용자측 기능에 대해서 다룹니다. 본 가이드를 참고하면 다음과 같은 내용을 할 수 있게 될 것입니다:

* +routes.rb+ 파일에 있는 코드 이해하기
* 더 선호되는 리소스 스타일이나 <tt>match</tt> 메소드를 이용하여 라우트 작성하기
* 액션으로 넘겨지는 파라메터 확인하기
* 라우트 헬퍼메소드를 이용하여 path와 URL 자동으로 생성하기
* 제약조건(constraints)과 Rack 어플리케이션 대상 라우팅과 같은 고급 기술 사용하기

endprologue.

h3(#The_Purpose_of_the_Rails_Router). 레일스 라우터의 목적

레일스 라우터는 URL을 인식하여 컨트롤러의 액션으로 보냅니다. 또한 path와 URL을 생성해 주기 때문에 뷰 템플릿에서 하드코딩할 필요가 없게 됩니다.

h4(#Connecting_URLs_to_Code). URL을 코드로 연결하기

레일스 어플리케이션이 다음과 같이 요청을 받게 될 때

<plain>
GET /patients/17
</plain>

라우터에게 이것을 컨트롤러 액션으로 매칭하도록 요구합니다. 첫번째 매칭 라우터가 다음과 같을 경우

<ruby>
match "/patients/:id" => "patients#show"
</ruby>

이 요청은 +params+ 해시에 <tt>{ :id => "17" }</tt> 키/값이 할당되어 +patients+ 컨트롤러의 +show+ 액션으로 보내집니다.

h4(#Generating_Paths_and_URLs_from_Code). 코드로부터 Path와 URL을 생성하기

또한 path와 URL을 생성할 수 있습니다. 어플리케이션이 다음과 같은 코드를 가지고 있을 경우:

<ruby>
@patient = Patient.find(17)
</ruby>

<erb>
<%= link_to "Patient Record", patient_path(@patient) %>
</erb>

라우터는 +/patients/17+ path를 생성할 것입니다. 이렇게 하면 뷰 템플릿의 포맷이 깨지는 것을 줄일 수 있고 코드를 더 잘 이해할 수 있게 됩니다. 주의할 것은 라우터 헬퍼메소드에는 id를 명시할 필요가 없다는 것입니다.

h3(#Resource_Routing_the_Rails_Default). 리소스 라우팅: 레일스 기본

리소스 라우팅은 특정 리소스 컨트롤러에 대해서 모든 공통 라우트를 빠르게 선언할 수 있게 해 줍니다. +index+, +show+, +new+, +edit+, +create+, +update+, +destroy+ 액션에 대해서 각각 라우트를 선언하는 대신에 코드 한 줄로 리소스 라우트는 이 모든 것을 선언하게 되는 것입니다.

h4(#Resources_on_the_Web). 웹에서의 리소스

브라우저는 +GET+, +POST+, +PUT+, +DELETE+ 와 같은 특별한 HTTP 메소드를 이용해서 특정 URL에 대한 요청을 보내어 레일스로부터 페이지를 요청하게 됩니다. 리소스 라우트는 수많은 요청을 하나의 컨트롤러 상에 있는 해당 액션들에게 연결해 줍니다.
레일스 어플리케이션이 다음과 같은 요청을 받게 될 때

<plain>
DELETE /photos/17
</plain>

라우터에게 해당 요청을 특정 컨트롤러 액션으로 연결하도록 요구하게 됩니다. 첫번째 매칭 라우트가 다음과 같을 때

<ruby>
resources :photos
</ruby>

레일스는 +params+ 해시에 <tt>{ :id => "17" }</tt> 키/값을 할당한 상태에서 이 요청을 +photos+ 컨트롤러 상의 +destroy+ 메소드로 보낼 것입니다.

h4(#CRUD_Verbs_and_Actions). CRUD, Verbs, and Actions

레일스에서, 리소스 라우트는 HTTP 메소드(verb)와 URL사이의 연결을 특정 컨트롤러 액션에 제공하게 됩니다. 레일스의 규칙에 따르면, 각각의 액션은 또한 데이터베이스의 해당 CRUD 작업으로 연결하게 됩니다. 다음과 같은 라우팅 파일내의 하나의 라우트는

<ruby>
resources :photos
</ruby>

어플리케이션에서 7개의 상이한 라우트를 생성하게 되는데, 모드 +Photos+ 컨트롤러로 연결됩니다:

|_. HTTP Verb |_.Path            |_.action |_.used for                                   |
|GET          |/photos           |index    |모든 photo의 목록을 보여줌.                       |
|GET          |/photos/new       |new      |photo를 새로 생성하기 위해서 HTML 폼을 반환함.       |
|POST         |/photos           |create   |photo를 새로 생성함.                           |
|GET          |/photos/:id       |show     |특정 photo를 보여줌.                         |
|GET          |/photos/:id/edit  |edit     |특정 photo를 수정하기 위해서 HTML 폼을 반환함.      |
|PUT          |/photos/:id       |update   |특정 photo를 업데이트함.                          |
|DELETE       |/photos/:id       |destroy  |특정 photo를 삭제함.                               |

NOTE: 레일스 라우트는 명시된 순서대로 연결되는데, +resources :photos+ 가 +get 'photos/poll'+ 위에 선언될 경우 +resources+ 라인에 대한 +show+ 액션 라우트는 +get+ 라인보다 먼저 연결이 될 것입니다. 이것을 바로 잡기 위해서는 +get+ 라인이 먼저 연결되도록 하기 위해 +resources+ 라인 위로 이동해야 합니다.

h4(#Paths_and_URLs). Path와 URL

리소스 라우트를 만들게 되면 어플리케이션의 컨트롤러에서 경로와 관련된 많은 헬퍼 메소드를 사용할 수 있게 됩니다. +resources :photos+ 의 경우에는:

* +photos_path+ 는 +/photos+ 를 반환합니다.
* +new_photo_path+ 는 +/photos/new+ 를 반환합니다.
* +edit_photo_path(:id)+ 는 +/photos/:id/edit+ 를 반환합니다.(예를 들어, +edit_photo_path(10)+ 는 +/photos/10/edit+ 를 반환합니다.)
* +photo_path(:id)+ 는 +/photos/:id+ 를 반환합니다.(예를 들어, +photo_path(10)+ 는 +/photos/10+ 을 반환합니다.)

위의 헬퍼메소드 각각은 해당 +_url+ 헬퍼(+photos_url+와 같이)메소드를 가지고 있어서 동일한 경로를, 현재 연결된 호스트명, 포트, 경로를 앞에 붙여 반환해 줍니다.

NOTE: 라우터는 HTTP verb와 URL을 이용해서 외부요청을 연결하기 때문에, 4개의 URL은 7개의 상이한 액션으로 연결됩니다.

h4(#Defining_Multiple_Resources_at_the_Same_Time). 한번에 여러개의 리소스 정의하기

하나 이상의 라우트를 만들 때 +resources+ 를 한번만 호출하여 한꺼번에 정의하면 타이핑 수를 줄일 수 있습니다:


<ruby>
resources :photos, :books, :videos
</ruby>

이것은 정확히 다음과 동일하게 동작합니다.

<ruby>
resources :photos
resources :books
resources :videos
</ruby>

h4(#Singular_Resources). 단수형 리소스

때때로 클라이언트들이 ID값을 참조하지 않고 리소스를 찾아야 경우가 있습니다. 예를 들면 +/profile+ 이 현재 로그인되어 있는 사용자의 프로파일을 보여주도록 할 때입니다. 이런 경우에는, 단수형 리소스를 사용하여 (+/profile/:id+ 보다는) +/profile+ 을 +show+ 액션으로 연결할 수 있습니다.

<ruby>
match "profile" => "users#show"
</ruby>

아래의 리소스 라우트는

<ruby>
resource :geocoder
</ruby>

6개의 상이한 라우트를 생성하는데, 모두 +Geocorders+ 컨트롤러로 연결됩니다:

|_.HTTP Verb |_.Path         |_.action |_.used for                                    |
|GET         |/geocoder/new  |new      |geocoder를 생성하기 위해 HTML 폼을 반환함.         |
|POST        |/geocoder      |create   |geocoder를 새로이 생성합니다.                      |
|GET         |/geocoder      |show     |단일 geocoder 리소스를 보여 줌                     |
|GET         |/geocoder/edit |edit     |geocoder를 수정하기 위해 HTML 폼을 반환함.          |
|PUT         |/geocoder      |update   |단일 geocoder 리소스를 업데이트함.                 |
|DELETE      |/geocoder      |destroy  |geocoder 리소스를 삭제함                          |

NOTE: 단수형 라우트(+/account+)와 복수형 라우트(+/accounts/45+)에 대해서 동일한 컨트롤러를 사용하기를 원하기 때문에 단수형 리소스는 복수형 컨트롤러에 연결됩니다.

단수형 리소스 라우트는 다음과 같은 헬퍼메소드를 생성해 줍니다:

* +new_geocoder_path+ 는 +/geocoder/new+ 를 반환합니다.
* +edit_geocoder_path+ 는 +/geocoder/edit+ 를 반환합니다.
* +geocoder_path+ 는 +/geocoder+ 를 반환합니다.

복수형 리소드에서와 같이, +_url+ 로 끝나는 동일한 헬퍼메소드는 연결된 호스트명, 포트, 경로명을 앞에 추가해 줍니다.

h4(#Controller_Namespaces_and_Routing). 컨트롤러 네임스페이스와 라우팅

특정 그룹의 컨트롤러들을 하나의 네임스페이스 아래 두고 싶어 할 수 있습니다. 가장 흔하게는, 여러개의 관리자용 컨트롤러들을 +Admin::+ 네임스페이스 아래에 둘 수 있습니다. 실제로는 이러한 컨트롤러들을 +app/controllers/admin+ 디렉토리 아래에 두게 되고 라우터 파일에서는 그룹으로 묶어 줄 수 있습니다:

<ruby>
namespace :admin do
  resources :posts, :comments
end
</ruby>

이렇게 하면, +posts+ 와 +comments+ 컨트롤러 각각에 대해서 많은 수의 라우트를 생성하게 될 것입니다. +Admin::PostsController+ 에 대해서는 다음과 같이 생성하게 될 것입니다:

|_.HTTP Verb |_.Path                |_.action |_.named helper             |
|GET         |/admin/posts          |index    | admin_posts_path          |
|GET         |/admin/posts/new      |new      | new_admin_post_path       |
|POST        |/admin/posts          |create   | admin_posts_path          |
|GET         |/admin/posts/:id      |show     | admin_post_path(:id)      |
|GET         |/admin/posts/:id/edit |edit     | edit_admin_post_path(:id) |
|PUT         |/admin/posts/:id      |update   | admin_post_path(:id)      |
|DELETE      |/admin/posts/:id      |destroy  | admin_post_path(:id)      |

(앞에 +/admin+ 을 붙이지 않고) +/posts+ 를 라우팅하고자 한다면 다음과 같이 사용할 수 있습니다.

<ruby>
scope :module => "admin" do
  resources :posts, :comments
end
</ruby>

또는, 리소스가 하나만 있는 경우에는 다음과 같이 사용할 수 있습니다.

<ruby>
resources :posts, :module => "admin"
</ruby>

(앞에 +Admin::+ 모듈을 붙이지 않고) +PostsController+ 에 +admin/posts+ 를 라우팅하고자 한다면, 다음과 같이 사용할 수 있습니다.

<ruby>
scope "/admin" do
  resources :posts, :comments
end
</ruby>

또는 리소스가 하나인 경우에 대해서는 다음과 같이 사용할 수 있습니다.

<ruby>
resources :posts, :path => "/admin/posts"
</ruby>

이 경우 각각에 대해서, +scope+ 를 사용하지 않을 때와 동일한 라우트명을 가지게 됩니다. 위의 마지막 예에서 다음의 path는 +PostsController+ 로 연결됩니다:

|_.HTTP Verb |_.Path               |_.action |_.named helper      |
|GET         |/admin/posts         |index    | posts_path         |
|GET         |/admin/posts/new     |new      | new_post_path      |
|POST        |/admin/posts         |create   | posts_path         |
|GET         |/admin/posts/:id     |show     | post_path(:id)     |
|GET         |/admin/posts/:id/edit|edit     | edit_post_path(:id)|
|PUT         |/admin/posts/:id     |update   | post_path(:id)     |
|DELETE      |/admin/posts/:id     |destroy  | post_path(:id)     |

h4(#Nested_Resources). 중첩 리소스

논리적으로 다른 리소스의 자식 리소스를 가지는 것은 흔한 일입니다. 예를 들어, 어플리케이션이 다음과 같은 모델을 포함하다고 가정하면:

<ruby>
class Magazine < ActiveRecord::Base
  has_many :ads
end

class Ad < ActiveRecord::Base
  belongs_to :magazine
end
</ruby>

중첩 라우트를 이용하여 라우팅 상에 이러한 관계를 반영할 수 있습니다. 이 경우에는, 다음과 같은 라우트 선언을 포함할 수 있습니다:

<ruby>
resources :magazines do
  resources :ads
end
</ruby>

이렇게 선언해 주게 되면, magazines에 대한 라우트 뿐만 아니라, 또한 ads를 +AdsController+ 로 라우팅(연결)해 줄 것입니다. ad URL은 magazine을 필요로하게 되는데:

|_.HTTP Verb |_.Path                  |_.action |_.used for                                                                 |
|GET         |/magazines/:id/ads        |index    |특정 magazine에 대한 모든 ad 목록을 보여 줌.                          |
|GET         |/magazines/:id/ads/new    |new      |특정 magazine에 속하는 ad를 새로이 생성하기 위한 HTML 폼을 반환함. |
|POST        |/magazines/:id/ads        |create   |특정 magazine에 속하는 ad를 새로이 생성함.                           |
|GET         |/magazines/:id/ads/:id      |show     |특정 magazine에 속하는 특정 ad를 보여 줌.                     |
|GET         |/magazines/:id/ads/:id/edit |edit     |특정 magazine에 속하는 특정 ad를 수정하기 위한 HTML 폼을 반환함.    |
|PUT         |/magazines/:id/ads/:id      |update   |특정 magazine에 속하는 특정 ad를 업데이트(갱신)함.|
|DELETE      |/magazines/:id/ads/:id      |destroy  |특정 magazine에 속하는 특정 ad를 삭제함.|

또한, 이것은 +magazine_ads_url+ 와 +edit_magazine_ad_path+ 와 같은 라우팅 헬퍼메소드를 생성할 것입니다. 이 헬퍼메소드들은 첫번째 파라메터(+magazine_ads_url(@magazine)+)로 Magazine 모델의 인스턴스를 취하게 됩니다.

h5(#Limits_to_Nesting). 중첩시 제한사항

원하다면 중첩 리소스 안에서 또 다른 리소스를 중첩할 수 있습니다. 예를 들면:

<ruby>
resources :publishers do
  resources :magazines do
    resources :photos
  end
end
</ruby>

리소스가 계속해서 중첩되면 금방 다루기 힘들어 질 것입니다. 예를 들어, 위의 경우에서, 어플리케이션은 다음과 같은 경로를 인식하게 될 것입니다.

<pre>
/publishers/1/magazines/2/photos/3
</pre>

이에 대한 라우트 헬퍼메소드는 +publisher_magazine_photo_url+ 가 되며, 3개의 레벨 모두에서 해당 객체를 명시해 주어야 할 것입니다. 이러한 상황은 정말 혼란을 초래하기에 충분해서 Jamis Buck의 유명한 "블로그 게시물":http://weblog.jamisbuck.org/2007/2/5/nesting-resources 에서는 레일스 디자인을 멋지하는 원칙을 제안하고 있습니다:

TIP: _resources는 절대로 1단계 이상 중첩되어서는 안됩니다._

h4(#Creating_Paths_and_URLs_From_Objects). 객체로부터 Path와 URL을 생성하기

라우팅 헬퍼메소드를 사용할 수 있을 뿐아니라, 레일스는 파라메터 배열로부터 path와 URL을 생성해 주기도 합니다. 예를 들어, 다음과 같은 라우트 설정이 있다고 가정해 보겠습니다:

<ruby>
resources :magazines do
  resources :ads
end
</ruby>

+magazine_ad_path+ 를 사용할 때, 숫자 ID 대신에 +Magazine+ 과 +Ad+ 모델의 인스턴스를 넘겨 줄 수 있습니다.

<erb>
<%= link_to "Ad details", magazine_ad_path(@magazine, @ad) %>
</erb>

또한 +url_for+ 메소드에 객체를 넘겨 주어 사용할 수도 있는데, 레일스는 어떤 라우트를 사용하고자 하는지를 자동으로 결정할 것입니다:

<erb>
<%= link_to "Ad details", url_for([@magazine, @ad]) %>
</erb>

이 때, 레일스는 +@magazine+ 을 +Magazine+ 모델로, +@ad+ 를 +Ad+ 모델로 인식하여, 결국 +magazine_ad_path+ 헬퍼메소드를 사용하게 될 것입니다. 특히나, +link_to+ 와 같은 헬퍼메소드에서는, 전체 +url_for+ 메소드를 호출하지 않고 객체만을 명시할 수도 있습니다:

<erb>
<%= link_to "Ad details", [@magazine, @ad] %>
</erb>

특정 magazine으로만 링크하고 싶다면 +Array+ 를 제거할 수 있습니다:

<erb>
<%= link_to "Magazine details", @magazine %>
</erb>

이렇게 하면 모델의 인스턴스를 URL 처럼 사용할 수 있게 해 주며, 이것이 바로 리소스 방식 라우팅의 주요 장점이기도 합니다.

h4(#Adding_More_RESTful_Actions). REST방식 액션 더 추가하기

REST방식 라우팅이 기본적으로 만드는 7개의 라우트 외에도, 원한다면 라우트를 추가하여 collection(객체 모음)이나 collection 각 member(각 객체)에 적용할 수도 있습니다.

h5(#Adding_Member_Routes). Member 라우트 추가하기

member 라우트를 추가하기 위해서는, 리소스 블록에 +member+ 블록을 추가하기만 하면 됩니다:

<ruby>
resources :photos do
  member do
    get 'preview'
  end
end
</ruby>

이렇게 하면 HTTP 메소드인 GET으로 +/photos/1/preview+ URL을 인식하게 되어 +PhotosController+ 의 +preview+ 액션으로 연결이 될 것입니다. 이것은 또한 +preview_photo_url+ 과 +preview_photo_path+ 헬퍼메소드도 만들어 줄 것입니다.

member 블록내에서, 각 라우트 이름 앞에 라우트가 인식하게 될 HTTP 메소드를 명시하게 됩니다. 여기서, +get+, +put+, +post+, +delete+ 를 사용할 수 있습니다. +member+ 라우트를 하나 이상 정의하지 않을 것이라면 라우트에 +:on+ 옵션을 넘겨 주어 블록을 생략할 수 있습니다:

<ruby>
resources :photos do
  get 'preview', :on => :member
end
</ruby>

h5(#Adding_Collection_Routes). Collection 라우트 추가하기

특정 collection에 라우트를 추가하기 위해서는 다음과 같이 collection 블록을 정의해 줄 수 있습니다:

<ruby>
resources :photos do
  collection do
    get 'search'
  end
end
</ruby>

이것은 레일스가 HTTP 메소드인 GET으로 +/photos/search+ 와 같은 경로를 인식할 수 있게 해 주어 +PhotosController+ 의 +search+ 액션으로 연결되도록 해 줄 것입니다. 또한 이것은 +search_photos_url+ 와 +search_photos_path+ 라우트 헬퍼메소드를 만들어 줄 것입니다.

member 라우트와 같이, 라우트에 +:on+ 옵션을 넘겨 줄 수 있습니다:

<ruby>
resources :photos do
  get 'search', :on => :collection
end
</ruby>

h5(#A_Note_of_Caution). 주의할 것

하나의 리소스 라우트에 너무 많은 액션을 추가하게 되면, 혹 자신이 다른 리소스의 존재를 감추고 있는 것은 아닌지 반문해 볼 필요가 있습니다(역자 주: 또 다른 리소스를 별도로 만들 것을 고려해 봐야 한다는 의미로 생각됨).

h3(#Non_Resourceful_Routes). 리소스가 아닌 URL을 이용한 라우트

리소스 라우팅 외에도, 레일스는 임의의 URL을 액션으로 연결할 수 있도록 매우 잘 지원합니다. 여기서는 리소스 라우팅에서 자동으로 만들어 주는 라우트들을 말하는 것이 아닙니다. 대신에 어플리케이션 내에서 별도로 각각의 라우트를 정의하고자 하는 것입니다.

대부분의 경우는 리소스 라우팅을 사용할 것이지만, 더 간단한 라우팅이 더 효과적인 경우도 많습니다. 즉, 어플리케이션에서 최근에 작업한 모든 내용을 맞지도 않는 리소스 라우팅 프레임워크에 끼워 맞출 필요가 없다는 것입니다.

특히나, 간단한 라우팅은 기존의 URL을 새로 추가하는 액션으로 쉽게 연결할 수 있게 해줍니다.

h4(#Bound_Parameters). URL에 붙어오는(Bound) 파라메터

일반적인 라우트를 정의할 때 일련의 심볼을 지정해 주게 되면 외부로부터 들어오는 HTTP 요청의 각 부분으로 레일스가 매핑해 주게 됩니다. 이 심볼 중에 2가지 특별한 것이 있는데, +:controller+ 심볼은 어플리케이션의 특정 컨트롤러 이름으로, +:action+ 심볼은 해당 컨트롤러내에 있는 특정 액션의 이름으로 매핑해 주게 됩니다. 예를 들면, 레일스의 기본 라우트 중의 하나를 생각해 보겠습니다:

<ruby>
match ':controller(/:action(/:id))'
</ruby>

라우트 파일내에서 이전 라우트 중에 매칭되는 것이 없기 때문에 외부로부터 들어오는 +/photos/show/1+ 요청은 바로 이 라우트가 처리하게 됩니다. 그 결과로 +PhotosController+ 의 +show+ 액션이 호출되고 마지막 파라메터인 +"1"+ 은 +params[:id]+ 로 값을 사용할 수 있게 될 것입니다. 또한 이 라우트는 괄호안에 +:action+ 과 +:id+ 가 옵션 파라메터로 정의되었기 때문에 +/photos+ 요청만으로도 +PhotosController#index+ 로 연결될 것입니다.

h4(#Dynamic_Segments). 동적 URL 세그먼트

일반적인 라우트 내에 원하는 만큼의 동적 세그먼트를 정의할 수 있습니다. +:controller+ 또는 +:action+ 외의 모든 세그먼트들은 +params+ 해시의 일부로 해당 액션에서 사용할 수 있게 될 것입니다. 아래와 같은 라우트를 정의한다면:

<ruby>
match ':controller/:action/:id/:user_id'
</ruby>

외부로부터 들어오는 +/photos/show/1/2+ 경로는 +PhotosController+ 의 +show+ 액션으로 보내질 것입니다. +params[:id]+ 는 +"1"+ 이, +params[:user_id]+ 는 +"2"+ 가 될 것입니다.

NOTE: +:controller+ 경로의 일부로 +namespace+ 또는 +:module+ 을 사용할 수 없습니다. 만약 이것을 사용하고자 한다면 +:controller+ 옵션에 원하는 +namespace+ 와 매칭되도록 제약조건을 사용해야 합니다. 예를 들면:

<ruby>
match ':controller(/:action(/:id))', :controller => /admin\/[^\/]+/
</ruby>

TIP: 기본적으로 동적 세그먼트에는 dot(.)를 사용할 수 없습니다. 왜냐하면 dot(.)는 xml이나 json과 같은 데이터 포맷을 지정하는 라우트에서 구분자로 사용되기 때문입니다. 그럼에도 불구하고 이 dot(.)를 동적 세그먼트내에서 사용해야 할 경우가 있다면 이것을 변경하도록 제약조건을 추가해 주어야 합니다. 예를 들어, +:id+ => /[^\/]+/ 와 같이 지정하면 슬래시 문자를 제외한 모든 것을 사용할 수 있게 됩니다.

h4(#Static_Segments). 정적 URL 세그먼트

라우트를 정의할 때 정적 세그먼트를 지정할 수 있습니다:

<ruby>
match ':controller/:action/:id/with_user/:user_id'
</ruby>

이 라우트는 +/photos/show/1/with_user/2+ 와 같은 경로에 매칭될 것입니다. 이 경우에, +params+ 해시는 <tt>{ :controller => "photos", :action => "show", :id => "1", :user_id => "2" }</tt>가 될 것입니다.

h4(#The_Query_String). 쿼리 스트링

+params+ 해시는 쿼리 스트링으로 들어오는 파라메터도 포함할 것입니다. 예를 들어, 다음과 같이 라우트가 정의되어 있을 때:

<ruby>
match ':controller/:action/:id'
</ruby>

외부로부터 +/photos/show/1?user_id=2+ 요청이 들어오면 +Photos+ 컨트롤러의 +show+ 액션으로 보내질 것입니다. +params+ 해시는 <tt>{ :controller => "photos", :action => "show", :id => "1", :user_id => "2" }</tt>가 될 것입니다.

h4(#Defining_Defaults). 기본값 정의하기

하나의 라우트 정의에서 +:controller+ 와 +:action+ 심볼을 명시적으로 사용할 필요가 없습니다. 왜냐하면 이 심볼값들을 기본값으로 지정할 수 있기 때문입니다:

<ruby>
match 'photos/:id' => 'photos#show'
</ruby>

이와 같이 라우트를 정의하면, 레일스는 외부로부터 들어오는 +/photos/12+ 경로를 +PhotosController+ 의 +show+ 액션으로 매칭할 것입니다.

또한 라우트 정의시 +:defaults+ 옵션을 지정하여 해시형태로 다른 기본값을 정의할 수 있습니다. 이것은 동적 세그먼트로 지정하지 않은 파라메터에도 적용이 됩니다. 예를 들면:

<ruby>
match 'photos/:id' => 'photos#show', :defaults => { :format => 'jpg' }
</ruby>

레일스는 +photos/12+ 를 +PhotosController+ 의 +show+ 액션으로 연결하고 +params[:format]+ 은 +"jpg"+ 로 지정해 줄 것입니다.

h4(#Naming_Routes). 라우트 명명하기

+:as+ 옵션을 이용하면 라우트에 이름을 지정할 수 있습니다.

<ruby>
match 'exit' => 'sessions#destroy', :as => :logout
</ruby>

이것은 어플리케이션에서 +logout_path+ 와 +logout_url+ 이라는 라우트를 사용할 수 있도록 이름을 만들어 줄 것입니다. +logout_path+ 는 +/exit+ 를 반환해 줄 것입니다.

h4(#HTTP_Verb_Constraints). HTTP 메소드(Verb) 제약조건

+:via+ 옵션을 이용하면 외부로부터의 요청을 하나 또는 그 이상의 HTTP 메소드로 제한할 수 있습니다:

<ruby>
match 'photos/show' => 'photos#show', :via => :get
</ruby>

또한 다음과 같이 간단하게 표시할 수도 있습니다:

<ruby>
get 'photos/show'
</ruby>

또한 하나의 라우트에 대해서 하나 이상의 verb를 허용할 수도 있습니다:

<ruby>
match 'photos/show' => 'photos#show', :via => [:get, :post]
</ruby>

h4(#Segment_Constraints). 세그먼트 제한조건

+:constraints+ 옵션을 이용하면 동적 세그먼트에 대해서 포맷을 강요할 수 있습니다:

<ruby>
match 'photos/:id' => 'photos#show', :constraints => { :id => /[A-Z]\d{5}/ }
</ruby>

이 라우트는 +/photos/A12345+ 와 같은 경로를 매칭할 수 있을 것입니다. 또한 동일한 라우트를 다음과 같이 더욱 간단하게 표현할 수도 있습니다:

<ruby>
match 'photos/:id' => 'photos#show', :id => /[A-Z]\d{5}/
</ruby>

+:constraints+ 옵션은 정규표현식을 이용하지만 regexp anchor(/^, $/)를 사용할 수 없다는 제한점이 있습니다. 예를 들면, 다음의 라우트는 동작하지 않을 것입니다:

<ruby>
match '/:id' => 'posts#show', :constraints => {:id => /^\d/}
</ruby>

그러나, 주목할 것은 모든 라우트는 기본적으로 시작점에 anchor를 두고 있기 때문에 별도로 anchor를 사용할 필요가 없다는 것입니다.

예를 들면, 다음의 라우트는, +posts+ 에 대해서 항상 숫자로 시작하는 +1-hellow-world+ 와 같은 +to_param+ 값을, +users+ 에 대해서 루트 네임스페이스를 공유하기 위해 숫자로 시작하지 않는 +david+ 와 같은 +to_param+ 값을 사용할 수 있도록 해 줄 것입니다:

<ruby>
match '/:id' => 'posts#show', :constraints => { :id => /\d.+/ }
match '/:username' => 'users#show'
</ruby>

h4(#Request_Based_Constraints). 요청에 따른 제약조건

또한 +String+ 을 반환하는 <a href="action_controller_overview.html#the-request-object">Request</a> 객체 상에 있는 메소드에 근거해서 라우트를 제한할 수도 있습니다.

세그먼트 제약조건을 명시하는 것과 똑같은 방법으로 요청에 따른 제약조건을 명시합니다:

<ruby>
match "photos", :constraints => {:subdomain => "admin"}
</ruby>

제약조건을 다음과 같이 블록형태로 명시할 수도 있습니다:

<ruby>
namespace :admin do
  constraints :subdomain => "admin" do
    resources :photos
  end
end
</ruby>

h4(#Advanced-Constraints). 고급 제약조건

더 고급스러운 제약조건을 사용할 경우에는, 레일스가 사용하게 될 +matches?+ 메소드에 대해 반응하는 객체를 제공할 수 있습니다. 블랙리스트에 있는 모든 사용자들을 +BlacklistController+ 로 라우팅한다고 가정해 봅시다. 다음과 같이 구현할 수 있습니다:

<ruby>
class BlacklistConstraint
  def initialize
    @ips = Blacklist.retrieve_ips
  end

  def matches?(request)
    @ips.include?(request.remote_ip)
  end
end

TwitterClone::Application.routes.draw do
  match "*path" => "blacklist#index",
    :constraints => BlacklistConstraint.new
end
</ruby>

h4(#Route-Globbing). 라우트 패턴매칭(Globbing)

라우트 패턴매칭(globbing)은 특정 파라메터가 라우터의 나머지 모든 부분에 매칭되도록 명시하는 방법을 말합니다. 예를 들면

<ruby>
match 'photos/*other' => 'photos#unknown'
</ruby>

이 라우트는 +photos/12+ 또는 +/photos/long/path/to/12+ 을 매칭해서 +params[:other]+ 를 +"12"+ 또는 +"long/path/to/12"+ 로 설정하게 될 것입니다.

와일드카드 세그먼트는 라우트상에 어디라도 위치할 수 있습니다. 예를 들면,

<ruby>
match 'books/*section/:title' => 'books#show'
</ruby>

이것은 +books/some/section/last-words-a-memoir+ 를 매칭해서, +params[:section]+ 는 +"some/section"+ 에, +params[:title]+ 은 +"last-words-a-memoir"+ 로 각각 할당하게 될 것입니다.

기술적으로는 하나의 라우트는 하나 이상의 와일드카드 세그먼트를 가질 수 있습니다. +match+ 메소드는 직관적으로 세그먼트를 파라메터로 할당하게 됩니다. 예를 들면,

<ruby>
match '*a/foo/*b' => 'test#index'
</ruby>

이것은 +zoo/woo/foo/bar/baz+ 를, +params[:a]+ 는 +"zoo/woo"+ 로, +params[:b]+ 는 +"bar/bas"+ 로 매칭할 것입니다.

NOTE: 레일스 3.1부터, 와일드카드 라우트는 기본적으로 반드시 옵션 포맷 세그먼트를 매칭하게 될 것입니다. 예를 들면 다음과 같이 라우트를 정의한다면:

<ruby>
match '*pages' => 'pages#show'
</ruby>

NOTE: 이 때, +"/foo/bar.json"+ 으로 요청하게 되면, +params[:pages]+ 는 JSON 요청포맷과 함께 +"foo/bar"+ 값이 할당될 것입니다. 만약, 3.0.x 버전 방식으로 사용하기를 원할 경우에는, 다음과 같이 +:format => false+ 옵션을 지정해 줄 수 있습니다:

<ruby>
match '*pages' => 'pages#show', :format => false
</ruby>

NOTE: 만약 포맷 세그먼트를 반드시 지정하도록 해서 생략해서는 안 되도록 하고자 한다면, 다음과 같이 +:format => true+ 옵션을 지정해 줄 수 있습니다:

<ruby>
match '*pages' => 'pages#show', :format => true
</ruby>

h4(#Redirection). 리디렉션(경로변경)

라우터에서 +redirect+ 헬퍼메소드를 이용하면 어떤 경로라도 다른 경로로 변경할 수 있습니다:

<ruby>
match "/stories" => redirect("/posts")
</ruby>

또한 변경된 경로에서도 매칭되는 동적 세그먼트를 재사용할 수 있습니다:

<ruby>
match "/stories/:name" => redirect("/posts/%{name}")
</ruby>

또한 경로변경을 위한 블록을 제공해서 params와 (옵션으로) 요청객체를 넘겨 줄 수 있습니다:

<ruby>
match "/stories/:name" => redirect {|params| "/posts/#{params[:name].pluralize}" }
match "/stories" => redirect {|p, req| "/posts/#{req.subdomain}" }
</ruby>

이러한 경로변경은 301 "Moved Permanently" 리디렉트라는 것을 주목하기 바랍니다. 기억해 둘 것은 어떤 웹브라우저나 프록시 서버는 이러한 형태의 경로변경(리디렉트)를 캐쉬하여 오래된 웹페이지는 접근할 수 없게 할 것이라는 것입니다.

이 모든 경우에 있어서, 호스트 도메인명(+http://www.example.com+)을 제공해 주지 않으면, 레일스가 현재 요청객체로부터 자세한 정보를 가져다 사용할 것입니다.

h4(#Routing-to-Rack-Applications). Rack 어플리케이션으로 라우팅하기

+PostsController+ 의 +index+ 액션에 해당하는 +"posts#index"+ 와 같은 문자열 대신에, +match+ 메소드의 대상으로 어떤 <a href="rails_on_rack.html">Rack 어플리케이션</a>으로도 지정할 수 있습니다.

<ruby>
match "/application.js" => Sprockets
</ruby>

+Sprockets+ 가 +호출+ 시 반응하여 <tt>[status, headers, body]</tt>을 반환한다면, 라우터는
 Rack 어플리케이션과 액션을 구분하지 못할 것입니다.

NOTE: 묘하게도, +"posts#index"+ 는 실제로 +PostsController.action(:index)+ 로 확장되어 유효한 Rack 어플리케이션을 반환하게 됩니다.

h4(#Using-root). +root+ 사용하기

레일스가 +root+ 메소드를 사용하여 +"/+ 로 경로를 이동할 대상을 명시할 수 있습니다:

<ruby>
root :to => 'pages#main'
</ruby>

이 +root+ 라우트는 라우터 파일의 최상단에 두어야 합니다. 왜냐하면 가장 자주 사용하는 라우트이어서 가장 먼저 매칭되어야 하기 때문입니다. 또한 root 라우트가 제대로 작동하기 위해서는 +public/index.html+ 파일을 삭제해야 합니다.

h3(#Customizing-Resourceful-Routes). 리소스 라우트 변경하기

+resources :posts+ 로부터 만들어지는 기본 라우트와 헬퍼메소드는 대개 별문제 없이 잘 동작할 것이지만, 언젠가는 수정이 필요할 때가 있을 수 있습니다. 실제로 레일스는 리소스 헬퍼메소드의 공통되는 부분에 대해서 변경할 수 있게 해 줍니다. 

h4(#Specifying-a-Controller-to-Use). 사용할 컨트롤러 지정하기

+:controller+ 옵션은 리소스에 대해서 사용할 컨트롤러를 명시하도록 해 줍니다. 예를 들면:

<ruby>
resources :photos, :controller => "images"
</ruby>

이것은 +/photos+ 로 시작하는 경로가 외부로부터 들어오는 것을 인지하지만 +Images+ 컨트롤러로 경로를 안내해 줍니다:

|_.HTTP Verb |_.Path           |_.action |_.named helper        |
|GET         |/photos          |index    | photos_path          |
|GET         |/photos/new      |new      | new_photo_path       |
|POST        |/photos          |create   | photos_path          |
|GET         |/photos/:id      |show     | photo_path(:id)      |
|GET         |/photos/:id/edit |edit     | edit_photo_path(:id) |
|PUT         |/photos/:id      |update   | photo_path(:id)      |
|DELETE      |/photos/:id      |destroy  | photo_path(:id)      |

NOTE: +photos_path+, +new_photo_path+ 등을 이용하여 이 리소스에 대한 경로를 만들면 됩니다.

h4(#Specifying-Constraints). 제약조건 지정하기

+:constraints+ 옵션을 이용하면 +id+ 의 포맷을 지정할 수 있습니다. 예를 들면:

<ruby>
resources :photos, :constraints => {:id => /[A-Z][A-Z][0-9]+/}
</ruby>

이렇게 선언하면 +id+ 파라메터가 지정한 정규표현식에 매칭되도록 제약조건을 줄 수 있습니다. 따라서, 이 경우에는 라우터가 더 이상 +/photos/1+ 로 매칭되지 못하고 대신에 +/photos/RR27+ 로 연결될 것입니다. 

블록 형태로 사용할 경우, 하나의 제약조건 아래 여러개의 라우트를 둘 수 있습니다: 

<ruby>
constraints(:id => /[A-Z][A-Z][0-9]+/) do
  resources :photos
  resources :accounts
end
</ruby>

NOTE: 물론, 이 상황에서 URL방식(non-resourceful) 라우트에서나 사용할 수 있는 고급 제약조건을 사용할 수도 있습니다. 

TIP: 기본적으로 +:id+ 파라메터는 dot(.)를 포함하지 않습니다. 왜냐하면 dot(.)가 포맷 라우트에 대한 구분자로 사용되기 때문입니다. +:id+ 내에 dot(.)를 사용해할 경우에는 이를 변경하는 제약조건을 추가해 주어야 합니다. 예를 들어, +:id+ = > /[^\/]+/ 는 슬래시를 제외한 모든 것을 사용할 수 있게 해줍니다.

h4(#Overriding-the-Named-Helpers). 헬퍼메소드의 이름 변경하기

+:as+ 옵션을 사용하면 라우트 헬퍼메소드의 일반적인 이름을 변경할 수 있습니다. 예를 들면:

<ruby>
resources :photos, :as => "images"
</ruby>

이것은 +/photos+ 으로 시작한 경로명이 외부로부터 들어오는 것을 인지해서 해당 요청을 +PhotosController+ 로 연결해 줄 것이지만 이 때 :as 옵션 값을 이용해서 헬퍼메소드의 명칭을 정하게 됩니다.

|_.HTTP verb|_.Path            |_.action |_.named helper        |
|GET        |/photos           |index    | images_path          |
|GET        |/photos/new       |new      | new_image_path       |
|POST       |/photos           |create   | images_path          |
|GET        |/photos/:id       |show     | image_path(:id)      |
|GET        |/photos/:id/edit  |edit     | edit_image_path(:id) |
|PUT        |/photos/:id       |update   | image_path(:id)      |
|DELETE     |/photos/:id       |destroy  | image_path(:id)      |

h4(#Overriding-the-new-and-edit-Segments). +new+ 와 +edit+ 세그먼트 변경하기

+:path_name+ 옵션을 이용하면 자동으로 생성되는 경로상의 "new"와 "edit" 세그먼트를 변경할 수 있게 해줍니다:

<ruby>
resources :photos, :path_names => { :new => 'make', :edit => 'change' }
</ruby>

이것은 다음과 같은 경로를 인식하게 해 줄 것입니다.

<plain>
/photos/make
/photos/1/change
</plain>

NOTE: 이 옵션으로 실제 액션 이름이 변경되지는 않습니다. 위의 두개의 경로는 여전히 +new+ 와 +edit+ 액션으로 연결될 것입니다.

TIP: 모든 라우트에 대해서 일괄적으로 이 옵션을 변경하고자 할 때는, scope을 사용할 수 있습니다.

<ruby>
scope :path_names => { :new => "make" } do
  # rest of your routes
end
</ruby>

h4(#Prefixing-the-Named-Route-Helpers). 라우트 헬퍼메소드 이름 앞에 덧붙이기

+:as+ 옵션을 이용하면 레일스가 특정 라우트에 대해서 만들어 주는 이름 앞에 이름을 추가할 수 있게 해 줍니다. 이 옵션을 이용하면 경로에 대한 scope을 사용할 때 라우트간의 이름 충돌을 피할 수 있습니다.

<ruby>
scope "admin" do
  resources :photos, :as => "admin_photos"
end

resources :photos
</ruby>

이것은 +admin_photos_path+, +new_admin_photo_path+ 등과 같은 라우트 헬퍼메소드를 제공해 줄 것입니다.

라우트 헬퍼메소드들의 그룹에 대해서 경로명 앞에 이름을 덧붙일 경우에는 +scope+ 에 +:as+ 옵션을 사용해 합니다:

<ruby>
scope "admin", :as => "admin" do
  resources :photos, :accounts
end

resources :photos, :accounts
</ruby>

이것은 +admin_photos_path+ and +admin_accounts_path+ 와 같은 라우트를 만들어 각각 +/admin/photos+ 와 +/admin/accounts+ 로 연결해 줄 것입니다.

NOTE: +네임스페이스+ scope은 자동으로 +:module+ 와 +:path+ 뿐만 아니라 +:as+ 도 이름 앞에 추가하게 될 것입니다.   

또한 파라메터 이름도 라우트 앞에 붙일 수 있습니다:

<ruby>
scope ":username" do
  resources :posts
end
</ruby>

이것은 +/bob/posts/1+ 와 같은 URL을 가능하게 해서 경로상의 +username+ 세그먼트를 +params[:user]+ 으로 참조할 수 있게 해 줄 것입니다.

h4(#Restricting-the-Routes-Created). 라우트 생성 제한하기

기본적으로 레일스는, 어플리케이션의 모든 REST방식(리소스) 라우트에 대해서 7개의 기본 액션(index, show, new, create, edit, update, and destroy)으로 연결되는 라우트를 만들어 줍니다. 이 때 +:only+ 와 +:except+ 옵션을 이용하면 이러한 작업을 세밀하게 조절할 수 있습니다. 즉, +:only+ 옵션은 레일스가 명시된 액션에 대해서만 라우트를 만들도록 알려 줍니다:

<ruby>
resources :photos, :only => [:index, :show]
</ruby>

이제, +/photos+ 로 연결되는 +GET+ 요청은 성공하지만, 보통 +create+ 액션으로 연결되는 +/photos+ 로 들어오는 +POST+ 요청을 실패하게 될 것입니다.

+:except+ 옵션은 레일스가 만들어서는 _안 되는_ 라우트나 라우트 목록을 명시합니다: 

<ruby>
resources :photos, :except => :destroy
</ruby>

이 경우, 레일스는 +destroy+(+/photos/:id+ 로 연결되는 +DELETE+ 요청)에 대한 라우트를 제외한 모든 라우트를 만들게 될 것입니다.

TIP: 어플리케이션이 많은 REST방식의 리소스 라우트를 가질 경우, 실제로 필요한 라우트만 만들기 위해 +:only+ 와 +:except+ 옵션을 사용하는 것을 메모리사용을 줄여 전체적인 라우팅 프로세스의 속도를 증가시킨 수 있습니다.

h4(#Translated-Paths). 경로명 변경하기

+scope+ 를 이용하면, 리소스 라우트에서 만들어지는 경로명을 변경할 수 있습니다:

<ruby>
scope(:path_names => { :new => "neu", :edit => "bearbeiten" }) do
  resources :categories, :path => "kategorien"
end
</ruby>

레일스는 이제 +CategoriesController+ 로 연결되는 라우트를 만들게 됩니다.

|_.HTTP verb|_.Path                     |_.action |_.named helper           |
|GET        |/kategorien                |index    | categories_path         |
|GET        |/kategorien/neu            |new      | new_category_path       |
|POST       |/kategorien                |create   | categories_path         |
|GET        |/kategorien/:id            |show     | category_path(:id)      |
|GET        |/kategorien/:id/bearbeiten |edit     | edit_category_path(:id) |
|PUT        |/kategorien/:id            |update   | category_path(:id)      |
|DELETE     |/kategorien/:id            |destroy  | category_path(:id)      |

h4(#Overriding-the-Singular-Form). 단수형 변경하기 

특정 리소스에 대해서 단수형 라우트를 정의하고자 할 경우에는, +Inflector+ 에 추가법칙을 더해 주어야 합니다.

<ruby>
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'tooth', 'teeth'
end
</ruby>

h4(#nested-names). 중첩 리소스에서 +:as+ 옵션 사용하기

+:as+ 옵션을 사용하면, 중첩 라우트 헬퍼메소드에서 리소스에 대해 자동으로 만들어지는 이름을 변경할 수 있게 해 줍니다. 예를 들어, 

<ruby>
resources :magazines do
  resources :ads, :as => 'periodical_ads'
end
</ruby>

이것은 +magazine_periodical_ads_url+ 와 +edit_magazine_periodical_ad_path+ 같은 라우팅 헬퍼메소드를 만들어 줄 것입니다

h3(#Inspecting-and-Testing-Routes). 라우트 점검 및 테스트하기

레일스는 라우트를 점검하고 테스트할 수 있는 기능을 제공해 줍니다.

h4(#Seeing-Existing-Routes-with-rake). +rake+ 를 이용하여 기존 라우트 목록보기

어플리케이션에서 사용할 수 있는 모든 라우트 목록을 보고자 한다면, +rake routes+ 명령을 실행하면 됩니다. 이것은 모든 라우트를 +routes.rb+ 파일에 정의된 순서대로 출력해 줄 것입니다. 각 라우트에 대해서 다음과 같은 정보를 알 수 있을 것입니다:

* (있을 경우) 라우트 이름
* 사용될 HTTP verb (라우트가 특정 verb에 대해서만 반응할 때)
* 연결되는 URL 패턴
* 해당 라우트에 대한 라우팅 파라메터

예를 들면, 다음은 특정 REST방식 리소스 라우트에 대한 +rake routes+ 명령의 결과 출력의 일부분입니다:

<pre>
    users GET    /users(.:format)          users#index
          POST   /users(.:format)          users#create
 new_user GET    /users/new(.:format)      users#new
edit_user GET    /users/:id/edit(.:format) users#edit
</pre>

+CONTROLLER+ 환경변수를 지정하면 특정 컨트롤러로 연결되는 라우트 목록만 볼 수 있습니다:

<shell>
$ CONTROLLER=users rake routes
</shell>

TIP: 터미날 윈도우의 폭을 충분히 넓게 하여 출력내용의 각 라인이 여러줄로 보이지 않도록 하면 +rake routes+ 명령의 출력내용을 훨씬 잘 볼 수 있게 될 것입니다.  

h4(#Testing-Routes). 라우트 테스트하기

라우트는 (어플리케이션의 나머지 부분과 같이) 테스트 전략에 포함해야 합니다. 레일스는 3개의 "built-in assertions":http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html 을 제공해 주어 테스트를 위한 라우트를 보다 간편하게 디자인할 수 있게 해 줍니다: 

* +assert_generates+
* +assert_recognizes+
* +assert_routing+

h5(#The-assert_generates-Assertion). +assert_generates+ Assertion

+assert_generates+ 는 특정 옵션들이 특정 경로를 만들어서 기본 라우트 또는 사용자정의 라우트와 함께 사용할 수 있다고 주장합니다.

<ruby>
assert_generates "/photos/1", { :controller => "photos", :action => "show", :id => "1" }
assert_generates "/about", :controller => "pages", :action => "about"
</ruby>

h5(#The-assert_recognizes-Assertion). +assert_recognizes+ Assertion

+assert_recognizes+ 는 +assert_generates+ 의 반대 기능을 합니다. 즉, 특정 경로를 인식하여 어플리케이션의 특정 위치로 연결한다고 주장합니다.

<ruby>
assert_recognizes({ :controller => "photos", :action => "show", :id => "1" }, "/photos/1")
</ruby>

+:method+ 인수에 HTTP verb를 명시할 수 있습니다:

<ruby>
assert_recognizes({ :controller => "photos", :action => "create" }, { :path => "photos", :method => :post })
</ruby>

h5(#The-assert_routing-Assertion). +assert_routing+ Assertion

+assert_routing+ 주장은 양방향으로 라우트를 점검하는 것입니다. 즉, 해당 경로가 해당 옵션을 만들고, 또 해당 옵션이 해당 경로를 만들게 되는지를 테스트하게 되는 것입니다. 이렇게 해서, 이 주장은 +assert_generates+ 와 +assert_recognizes+ 함수를 합친 것입니다.

<ruby>
assert_routing({ :path => "photos", :method => :post }, { :controller => "photos", :action => "create" })
</ruby>

NOTE: 초벌번역: 2012년 5월 15일 ~ 최효성(hschoidr@gmail.com) 譯

WARNING: 번역상의 오류가 있는 경우 _*로그인하신 후*_ "이곳":http://rorlab.org/categories/3/posts/167 에 댓글을 남겨 주시기 바랍니다.