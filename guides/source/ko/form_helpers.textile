h2. 레일스 폼 헬퍼

웹어플리케이션에서 폼은 사용자가 데이터를 입력할 수 있는 필수 인터페이스입니다. 그러나, 폼 컨트롤러의 이름을 붙이는 것과 많은 속성들 때문에, 폼 마크업 태그들은 작성하고 관리하기가 갑자기 지루해질 수 있습니다. 레일스는 폼 마크업 태그를 만들어 주는 뷰 헬퍼 메소드를 제공하여 이러한 복잡한 것을 대신 처리해 줍니다. 그러나, 다양한 경우들이 있을 수 있기 때문에 개발자는 사용하기 전에 비슷한 헬퍼 메소드간의 차이점을 모두 알고 있어야 합니다.

본 가이드에서는:

* 웹어플리케이션에서 특정 모델과 연결되지 않는 검색 폼과 이와 비슷한 종류의 일반적인 폼을 만들게 될 것입니다. 
* 특정 데이터베이스 레코드를 만들고 수정하기 위해 모델과 연결되는 폼을 만들게 될 것입니다. 
* 다양한 데이터형으로부터 select 박스를 생성할 것입니다.
* 레일스가 제공하는 날짜와 시간 헬퍼 메소드를 이해하게 될 것입니다.
* 파일 업로드 폼의 차이점을 알게 될 것입니다.
* 외부 리소스로 연결되는 폼을 만들는 몇가지 예를 배우게 될 것입니다. 
* 복잡한 폼을 구현하는 방법을 소개하는 곳을 알게 될 것입니다. 

endprologue.

NOTE: 본 가이드는 사용 가능한 폼 헬퍼와 인수들에 대한 모든 것을 문서화하기 위한 것은 아닙니다. 이것에 대한 레퍼런스를 보기 위해서는 "the Rails API documentation":http://api.rubyonrails.org/ 을 방문하기 바랍니다.


h3(#dealing_basic_form). 기본 폼 다루기

가장 기본적인 폼 헬퍼는 +form_tag+입니다.

<erb>
<%= form_tag do %>
  Form contents
<% end %>
</erb>

이와 같이 +form_tag+를 인수 없이 호출하면 레일스는 +&lt;form&gt;+ 태그를 만들게 되고 , 이 폼을 submit 할 때 현재의 페이지로 POST할 것입니다. 예를 들면, 현재의 페이지가 +/home/index+ 라고 가정한다면, 생성된 HTML은 다음과 같이 보일 것입니다.

<html>
<form accept-charset="UTF-8" action="/home/index" method="post">
  <div style="margin:0;padding:0">
    <input name="utf8" type="hidden" value="&#x2713;" />
    <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  </div>
  Form contents
</form>
</html>

이제, HTML이 무언가를 추가한 것을 알게 될 것입니다. 즉, 내부에 두개의 숨겨진 input 엘리먼트를 포함하는 +div+ 엘리먼트입니다. 이 +div+ 엘리먼트가 없다면 폼을 성공적으로 submit할 수 없기 때문에 중요합니다. +utf8+ 이름의 첫번째 input 엘리먼트는 브라우저가 폼의 문자 인코딩을 강제로 유지하도록 해주고 "GET" 또는 "POST"에 상관없이 모든 폼에 대해서 만들어집니다. 두번째 input 엘리먼트인 +authenticity_token+는 *cross-site request forgery protection*라 불리는 레일스의 보안관련 기능을 위한 것이며, 폼 헬퍼는 이러한 보안 기능이 작동하는 상태에서 모든 non-GET 폼에 대해서 이 엘리먼드를 만들어 줍니다. "Security Guide":./security.html#_cross_site_reference_forgery_csrf 에서 이와 관련된 더 자세한 내용을 읽을 수 있습니다.

NOTE: 본 가이드에서는 숨겨진 input 엘리먼트가 포함되어 있는 +div+는 소스코드를 간결하게 볼 수 있도록 코드 샘플에서 제외할 것입니다. 

h4(#A_Generic_Search_Form). 일반 검색 폼 

웹에서 볼 수 있는 가장 기본적인 폼 중에 하나는 검색 폼입니다. 이러한 폼은 다음과 같은 것을 가지게 됩니다:

# "GET" 메소드를 가지는 폼 엘리먼트 하나
# input을 위한 label 엘리먼트 하나
# 텍스트 input 엘리먼트 하나, 그리고
# submit 엘리먼트 하나

이러한 폼을 만들기 위해서는 +form_tag+, +label_tag+, +text_field_tag+, 그리고 +submit_tag+를 다음과 같이 각각 사용하게 됩니다:

<erb>
<%= form_tag("/search", :method => "get") do %>
  <%= label_tag(:q, "Search for:") %>
  <%= text_field_tag(:q) %>
  <%= submit_tag("Search") %>
<% end %>
</erb>

이것은 다음과 같은 HTML을 생성합니다:

<html>
<form accept-charset="UTF-8" action="/search" method="get">
  <label for="q">Search for:</label>
  <input id="q" name="q" type="text" />
  <input name="commit" type="submit" value="Search" />
</form>
</html>

TIP: 레일스는 모든 폼 input에 대해서, 예제의 "q"와 같이, input 엘리먼트의 이름(name)으로부터 ID 속성을 만들어 줍니다. 이러한 ID는 CSS 스타일링이나 자바스크립트로 폼 컨트롤들을 조작하는데 매우 유용할 수 있습니다. 

+text_field_tag+ 과 +submit_tag+ 외에도, HTML에 있는 _모든_ 폼 컨트롤러에 대응하는 (비슷한) 헬퍼가 존재합니다. 

IMPORTANT: 검색 폼의 메소드로 반드시 "GET"을 사용하기 바랍니다. 이렇게 하면 특정 검색을 북마크해 두었다가 나중에 다시 해당 검색주소로 돌아갈 수 있게 됩니다. 더 일반적인 상황에서 레일스는 특정 액션에 대해서 올바른 HTTP verb를 사용할 것을 권장합니다.

h4(#Multiple_Hashes_in_Form_Helper_Calls). 폼 헬퍼 호출시 복수 해쉬 사용하기

+form_tag+ 헬퍼는 2개의 인수를 받습니다: 액션 경로와 옵션 해쉬. 이 해쉬로 폼 서브미션(submission)시 사용할 메소드와 폼 엘리먼트의 클래스와 같은 HTML 옵션을 지정합니다. 

+link_to+ 헬퍼와 같이, 경로 인수는 반드시 문자열일 필요가 없습니다. 즉, 이것은 해쉬를 유효한 URL로 변환시켜주는 레일스의 라우팅 메카니즘이 인식할 수 있는 해쉬형태의 URL 매개변수로도 가능합니다. 그러나, +form_tag+ 의 인수 모두가 해시형이면, 둘 다 지정하고자 할 때 쉽게 문제가 발생하게 됩니다. 예를 들면, 다음과 같이 코드를 작성할 경우를 가정해 봅시다:

<ruby>
form_tag(:controller => "people", :action => "search", :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search?method=get&class=nifty_form" method="post">'
</ruby>

여기서, +method+와 +class+가 만들어지는 URL 쿼리문자열의 끝에 추가됩니다. 왜냐하면 두개의 해쉬를 작성(하나는 경로, 다른 하나는 옵션)한다고 했지만 실제로는 한개만 지정한 셈이 되기 때문입니다. 따라서 첫번째 해쉬 또는 둘 다 대괄호로 묶어 주어 레일스에게 어느 것이 어느 것인지 알려 주어야 합니다:

<ruby>
form_tag({:controller => "people", :action => "search"}, :method => "get", :class => "nifty_form")
# => '<form accept-charset="UTF-8" action="/people/search" method="get" class="nifty_form">'
</ruby>

h4(#Helpers_for_Generating_Form_Elements). 폼 엘리먼트를 생성하는 헬퍼

레일스는 체크박스, 텍스트 필드, 라디오 버튼과 같은 폼 엘리먼트를 생성하기 위한 몇가지 헬퍼를 제공합니다. 이와 같이 이름 끝에 "_tag"가 붙은 기본 헬퍼는 하나의 +&lt;input&gt;+ 엘리먼트를 만들어 줍니다. 이 헬퍼의 첫번째 매개변수는 반드시 input 엘리먼트의 이름이어야 합니다. 폼이 제출(submit)될 때 이 이름도 폼 데이터와 함께 넘겨져서, 사용자가 해당 필드에 입력한 값을 컨트롤러에서 +params+ 해쉬로 받게 됩니다. 예를 들면, 폼이 +<%= text_field_tag(:query) %>+를 가지고 있다면, +params[:query]+를 이용해서 컨트롤러에서 이 필드의 값을 받게 되는 것입니다. 

input 엘리먼트에 이름을 붙일 때, 레일스는 일정한 규칙을 가지고 있어서 배열이나 해쉬와 같은 양를 표시할 수 없는 매개변수도 제출(submit)할 수 있게 해 주는데, 이 값은 +params+ 해쉬로도 받을 수 있습니다. 더 자세한 내용은 "chapter 7 of this guide":#understanding-parameter-naming-conventions 을 참고하시면 됩니다. 또한 이러한 헬퍼의 정확한 사용법은 "API documentation":http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html 을 참고하면 됩니다.

h5(#Checkboxes). 체크박스 

체크박스는 폼 컨트롤러로써 사용자들에게 가능여부를 선택할 수 있는 옵션 셋을 제공해 줍니다:

<erb>
<%= check_box_tag(:pet_dog) %>
<%= label_tag(:pet_dog, "I own a dog") %>
<%= check_box_tag(:pet_cat) %>
<%= label_tag(:pet_cat, "I own a cat") %>
</erb>

이것은 다음과 같이 HTML 태그를 만들어 줍니다:

<html>
<input id="pet_dog" name="pet_dog" type="checkbox" value="1" />
<label for="pet_dog">I own a dog</label>
<input id="pet_cat" name="pet_cat" type="checkbox" value="1" />
<label for="pet_cat">I own a cat</label>
</html>

+check_box_tag+ 의 첫번째 매개변수는 물론 input 엘리먼트의 이름입니다. 두번째 매개변수는 당연히 input의 값이 될 것입니다. 체크박스를 체크할 경우 이 값은 폼 데이터에 포함될 것이고 +params+ 해쉬로 받을 수 있게 됩니다. 

h5(#Radio_Buttons). 라디오 버튼

라디오 버튼은 체크박스와 비슷한 반면 여러 개의 선택 옵션 중에 하나만 선택할 수 있는 컨트롤러입니다:

<erb>
<%= radio_button_tag(:age, "child") %>
<%= label_tag(:age_child, "I am younger than 21") %>
<%= radio_button_tag(:age, "adult") %>
<%= label_tag(:age_adult, "I'm over 21") %>
</erb>

결과 HTML:

<html>
<input id="age_child" name="age" type="radio" value="child" />
<label for="age_child">I am younger than 21</label>
<input id="age_adult" name="age" type="radio" value="adult" />
<label for="age_adult">I'm over 21</label>
</html>

+check_box_tag+ 와 같이, +radio_button_tag+ 의 두번째 매개변수는 input 엘리먼트의 값입니다. 위의 예에서 두 개의 라디오 버튼은 같은 이름(age)을 가지며 둘 중에 하나만 선택될 수 있습니다. +params[:age]+ 는 "child" 또는 "adult" 값을 가질 것입니다. 

NOTE: 체크박스와 라디오버튼에 대해서는 항상 +label+ 을 사용하기 바랍니다. +label+ 은 텍스트를 특정 옵션과 연관지어 주며, 클릭할 수 있는 영역을 넓혀주어 사용자가 해당 input을 쉽게 클릭할 수 있게 해 줍니다.

h4(#Other_Helpers_of_Interest). 관심을 둘 만한 기타 폼 헬퍼

언급할 만한 다른 폼 컨트롤러로는 textareas, password fields, hidden fields, search fields, telephone fields, URL fields and email fields가 있습니다:

<erb>
<%= text_area_tag(:message, "Hi, nice site", :size => "24x6") %>
<%= password_field_tag(:password) %>
<%= hidden_field_tag(:parent_id, "5") %>
<%= search_field(:user, :name) %>
<%= telephone_field(:user, :phone) %>
<%= url_field(:user, :homepage) %>
<%= email_field(:user, :address) %>
</erb>

결과 HTML:

<html>
<textarea id="message" name="message" cols="24" rows="6">Hi, nice site</textarea>
<input id="password" name="password" type="password" />
<input id="parent_id" name="parent_id" type="hidden" value="5" />
<input id="user_name" name="user[name]" size="30" type="search" />
<input id="user_phone" name="user[phone]" size="30" type="tel" />
<input id="user_homepage" size="30" name="user[homepage]" type="url" />
<input id="user_address" size="30" name="user[address]" type="email" />
</html>

사용자는 +hidden input+ 을 볼 수 없지만 다른 텍스트 input과 같이 데이터를 가지고 있습니다. +hidden input+ 값은 자바스크립트로 변경할 수 있습니다. 

IMPORTANT: +search+, +telephone+, +URL+, 그리고 +email+ input 엘리먼트는 HTML5 컨트롤입니다. 오래된 버전의 브라우저와의 호환성을 가지도록 하려면 (CSS와 자바스크립트가 제공해 주는) HTML5 polyfill을 사용할 필요가 있습니다. 현재 "Modernizr":http://www.modernizr.com/ 와 "yepnope":http://yepnopejs.com/ 과 같은 몇 가지 툴들이 있어 HTML5 기능이 작동할 때 기능추가를 할 수 있는 간단한 방법을 제공해 주지만, "이러한 것에 대한 해결책":https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills 이 부족하지 않습니다.

TIP: 어떤 목적에서든지, password input 필드를 사용할 경우에는, 어플리케이션을 수정하여 이 매개변수의 로그가 남지 않도록 해야 합니다. 이것에 대한 내용은 "Security Guide":security.html#logging 을 참고하기 바랍니다. 

h3(#Dealing_with_Model_Objects). 모델 객체 다루기

h4(#Model_Object_Helpers). 모델 객체 헬퍼

폼에서 흔히 작업하는 것으로는 특정 모델 객체를 수정하거나 새로 만드는 일이 있습니다.+*_tag+ 헬퍼도 분명히 이러한 목적으로 사용할 수 있지만, 이것들은, 각 태그에 대해서 매개변수명이 정확하고 input의 디폴트 값이 적절하게 할당되었는지 일일이 확인해 주어야 하므로 다소 번잡스러운 듯 합니다. 레일스는 이러한 작업에 맞는 헬퍼를 제공해 줍니다. 이 헬퍼들은 메소드명 끝에 <notextile>_tag</notextile> 가 없습니다. 예를 들면, +text_field+, +text_area+ 와 같습니다.

이 헬퍼의 첫번재 인수는 인스턴스 변수명이 되고 두번째 인수는 해당 객체를 호출하는 메소드명이 됩니다. 레일스는 해당 input 컨트롤의 값을 해당 객체에 대한 메소드의 반환값으로 할당하고 적절한 input 엘리먼트 이름을 정해 줍니다. 컨트롤러가 +@person+ 를 정의하고 그 사람의 name이 Henry이라면 폼은 아래의 코드를 가지게 됩니다:

<erb>
<%= text_field(:person, :name) %>
</erb>

이것은 다음과 같은 결과를 보여 줄 것입니다.

<erb>
<input id="person_name" name="person[name]" type="text" value="Henry"/>
</erb>

폼을 제출(submission)할 때 사용자가 입력한 값은 +params[:person][:name]+ 에 저장될 것입니다. +params[:person]+ 해쉬는 +Person.new+ 로 넘기기에 적당하고, 또한, +@person+ 이 Person 모델의 인스턴스이라면 +@person.update_attributes+ 로 넘기기에 적당할 것입니다. 속성명이 대부분 이 헬퍼의 두번째 매개변수이긴 하지만, 이것은 강제조항은 아닙니다. 위의 예에서, person 객체가 +name+ 와 +name=+ 메소드를 가지고 있다면 레일스는 매끄럽게 일을 처리할 것입니다. 

WARNING: 이 때 모델 객체의 실제 인스턴스가 아니라 +:person+ 이나 +"person"+ 와 같이 인스턴스명을 넘겨 주어야 합니다. 

레일스는 특정 모델 객체와 연과된 유효성 검증 에러를 표시하기 위한 헬퍼를 제공해 줍니다. 이것에 관해서는 "Active Record Validations and Callbacks":./active_record_validations_callbacks.html#displaying-validation-errors-in-the-view 가이드에서 자세히 기술되어 있습니다.

h4(#Binding_a_Form_to_an_Object). 폼을 객체에 연결하기

이것은 편리함을 더해 주지만 결코 완벽하지는 않습니다. Person 모델이 수정해야할 속성이 많을 경우, 수정될 객체의 이름을 여러번 반복해야 할 것입니다. 우리가 원하는 것은 폼을 모델 객체에 연결하는 방법이 될 것이고 이것은 정확히 +form_for+ 가 하는 일입니다.

article을 다루어야 하는 컨트롤러가 있다고 가정해 봅니다. +app/controllers/articles_controller.rb+ 의 내용은 다음과 같습니다:

<ruby>
def new
  @article = Article.new
end
</ruby>

+form_for+ 를 이용하는 해당 뷰 테블릿 +app/views/articles/new.html.erb+ 파일은 다음과 같이 보일 것입니다:

<erb>
<%= form_for @article, :url => { :action => "create" }, :html => {:class => "nifty_form"} do |f| %>
  <%= f.text_field :title %>
  <%= f.text_area :body, :size => "60x12" %>
  <%= f.submit "Create" %>
<% end %>
</erb>

여기서 주목해야할 몇가지 사항이 있습니다:

# +@article+ 은 수정하게 될 실제 객체입니다.
# 옵션을 지정하는 하나의 해쉬가 있습니다. 라우팅 옵션은 +:url+ 해쉬로 넘겨지고, HTML 옵션은 +:html+ 해쉬로 넘겨집니다. 또한 +:namespace+ 옵션을 제공하여 폼이 자신의 id 속성이 유일한 것인지를 확인토록 해 줍니다. 네임스페이스 속성은 만들어진 HTML id 앞에 밑줄문자가 붙게 됩니다.
# +form_for+ 메소드는 *폼 빌더* 객체를 만들어 줍니다(+f+ 변수).
# 폼 컨트롤을 만드는 메소드는 폼 빌더 객체인 +f+ 상에서 호출됩니다.

결과 HTML은 다음과 같습니다:

<html>
<form accept-charset="UTF-8" action="/articles/create" method="post" class="nifty_form">
  <input id="article_title" name="article[title]" size="30" type="text" />
  <textarea id="article_body" name="article[body]" cols="60" rows="12"></textarea>
  <input name="commit" type="submit" value="Create" />
</form>
</html>

+form_for+ 로 넘겨진 이름은 폼 값들을 접근하기 위해 +params+ 에서 사용하는 키로 사용됩니다. 여기서는 +article+ 이 해당하고 모든 input 엘리먼트는 +article[<em>attribute_name</em>]+ 와 같은 이름을 가지게 됩니다. 따라서, +create+ 액션에서 +params[:article]+ 은 +:title+ 와 +:body+ 키를 가지는 해쉬가 될 것입니다. parameter_names 센션에서 input 이름의 의미에 대해서 자세히 읽을 수 있습니다. 

폼 빌더에서 호출되는 헬퍼 메소드는 모델 객체 헬퍼와 동일합니다. 단, 이 경우에는 이미 폼 빌더에서 수정할 객체를 관리하고 있기 때문에 대상 객체를 명시할 필요가 없게 됩니다.

+fields_for+ 헬퍼을 이용하면 실제 +&lt;form&gt;+ 태그를 만들지 않고도 모델객체를 폼에 연결할 수 있게 됩니다. 이것은 동일한 폼 안에서 별도의 모델 객체를 추가하여 수정하고자 할 때 유용합니다. 예를 들어, ContactDetail 모델이 Person 모델에 연관되어 있을 때 하나의 폼을 만들어 이와 같이 두개의 모델객체를 연결할 수 있게 되는 것입니다.

<erb>
<%= form_for @person, :url => { :action => "create" } do |person_form| %>
  <%= person_form.text_field :name %>
  <%= fields_for @person.contact_detail do |contact_details_form| %>
    <%= contact_details_form.text_field :phone_number %>
  <% end %>
<% end %>
</erb>

이것은 다음과 같은 결과를 만들어 줍니다:

<html>
<form accept-charset="UTF-8" action="/people/create" class="new_person" id="new_person" method="post">
  <input id="person_name" name="person[name]" size="30" type="text" />
  <input id="contact_detail_phone_number" name="contact_detail[phone_number]" size="30" type="text" />
</form>
</html>

+fields_for+ 가 만들어 주는 객체는, +form_for+ 가 만들어 주는 것처럼, 하나의 폼 빌더인 것입니다. 사실 내부적으로는 +form_for+ 는 +fields_for+ 를 호출하게 됩니다. 

h4(#Relying_on_Record_Identification). 레코드확인(Record Identification) 이용하기

Article 모델은 어플리케이션 사용자들이 바로 사용할 수 있는데 -- 레일스를 이용한 개발시 최선의 방법에 따라 -- 해당 모델을 *resource* 로 선언해 주어야 합니다:

<ruby>
resources :articles
</ruby>

TIP: 리소스를 선언하면 부대효과가 많습니다. 리소스를 셋업하고 사용하는 방법에 대한 자세한 정보는 "Rails Routing From the Outside In":routing.html#resource-routing-the-rails-default 을 보기 바랍니다. 

리소스를 RESTful 방식으로 처리할 때, *레코드확인* 을 이용하면, +form_for+ 호출이 상당히 쉬워집니다. 이것은 간단히 말하면, 모델 인스턴스만 넘겨 주면 모델이름과 나머지 것들을 레일스가 알아서 해 주는 것을 말합니다:

<ruby>
## Creating a new article
# long-style:
form_for(@article, :url => articles_path)
# same thing, short-style (record identification gets used):
form_for(@article)

## Editing an existing article
# long-style:
form_for(@article, :url => article_path(@article), :html => { :method => "put" })
# short-style:
form_for(@article)
</ruby>

+form_for+ 에 대한 단축형 호출이 편리하게도 레코드를 새로 추가하거나 기존의 레코드를 수정할 때도 동일할 수 있는 이유에 대해서 주목하기 바랍니다. *레코드확인* 은 +record.new_record?+ 를 호출하여 레코드가 새로 추가된 것인지를 알아낼 만큼 지능적입니다. 또한 객체의 클래스에 근거해서 폼을 제출해야할 정확한 경로와 이름을 선택하게 됩니다.

레일스는 또한 자동으로 폼의 +class+ 와 +id+ 를 적절하게 설정해 줄 것입니다: article을 새로 추가하는 폼은 +new_article+ 이라는 +id+ 와 +class+ 이름을 가지게 될 것입니다. id가 23번인 article을 수정하고자 한다면 +class+ 는 +edit_article+ 로 설정될 것이고 +id+ 는 +edit_article_23+ 으로 설정될 것입니다. 이 속성들은 본 가이드의 나머지에서 간결함을 유지하기 위해 생략될 것입니다. 

WARNING: 모델로 STI(단일 테이블 상속)를 이용하고자 한다면, 모(parent)클래스만이 리소스로 선언될 경우 하위클래스에 대해서는 *레코드확인* 을 이용할 수 없게 됩니다. 이런 경우에는, 모델명, +:url+ , +:method+ 를 명시해 주어야 할 것입니다. 

h5(#Dealing_with_Namespaces). 네임스페이스로 작업하기

네임스페이스를 이용하여 라우트를 만든 경우, +form_for+ 는 또한 이에 대한 멋진 편리함을 제공해 줍니다. 어플리케이션이 admin 이라는 네임스페이스를 가지고 있다면, 

<ruby>
form_for [:admin, @article]
</ruby>

이것은 admin 네임스페이스 내에 있는 articles 컨트롤러로 제출(submit)하는 폼을 만들어 줄 것입니다(데이터 갱신시 +admin_article_path(@article)+ 로 제출하게 됨). 또한 여러 레벨의 네임스페이스가 있더라도 그 문장은 비슷합니다:

<ruby>
form_for [:admin, :management, @article]
</ruby>

레일스의 라우팅 시스템과 관련 규칙에 대해서 자세한 정보를 원하면 "routing guide":routing.html 보기 바랍니다. 

h4(#How_do_forms_with_PUT_or_DELETE_methods_work). 폼은 PUT이나 DELETE 메소드를 어떻게 작동시키는가?

레일스 프레임워크는 어플리케이션을 RESTful 방식으로 디자인하도록 권장하고 있는데, 이것은 "GET"과 "POST" 외에 "PUT"과 "DELETE" 요청을 많이 하게 될 것이라는 것을 의미합니다. 그러나, 대부분의 브라우저는 폼을 제출할 때 "GET"과 "POST" 외의 다른 메소드는 _지원하지 않습니다._ 

레일스는 이 문제를, +"_method"+ 라는 숨겨진 input 을 이용하여 해결합니다. 즉, 다른 메소드가 POST처럼 흉내내도록 하여, 원하는 메소드가 작동되도록 합니다:

<ruby>
form_tag(search_path, :method => "put")
</ruby>

output:

<html>
<form accept-charset="UTF-8" action="/search" method="post">
  <div style="margin:0;padding:0">
    <input name="_method" type="hidden" value="put" />
    <input name="utf8" type="hidden" value="&#x2713;" />
    <input name="authenticity_token" type="hidden" value="f755bb0ed134b76c432144748a6d4b7a7ddf2b71" />
  </div>
  ...
</html>

POST된 데이터를 파싱할 때 레일스는 +_method+ 매개변수를 특별히 취급해서 그것이 마치 HTTP 메소드인 것처럼 동작하게 해 줍니다. 이 예제의 경우 "PUT"이 해당합니다. 

h3(#Making_Select_Boxes_with_Ease). Select Box를 쉽게 만들기

HTML에서 select box는 상당히 많은 양의 마크업(각 선택 옵션마다 하나씩의 +OPTION+ 엘리먼트를 가짐)을 필요로 하기 때문에 이것을 동적으로 만드는 것이 가장 합리적입니다. 

여기에 마크업의 내용이 있습니다:

<html>
<select name="city_id" id="city_id">
  <option value="1">Lisbon</option>
  <option value="2">Madrid</option>
  ...
  <option value="12">Berlin</option>
</select>
</html>

여기에 사용자들에게 보여질 도시명의 리스트가 있습니다. 내부적으로 어플리케이션은 도시의 ID값만을 처리하고자 하기 때문에 그 ID값을 선택 옵션의 값 속성으로 사용합니다. 레일스가 여기서 어떻게 도움을 주는 알아 보겠습니다. 

h4(#The_Select_and_Option_Tags). Select와 Option 태그

가장 일반적으로 사용하는 헬퍼는 +select_tag+ 입니다. 이것은 이름이 나타내는 바와 같이 단순히 옵션 문자열을 포함하는 +SELECT+ 태그를 만들어ㅓ 줍니다:

<erb>
<%= select_tag(:city_id, '<option value="1">Lisbon</option>...') %>
</erb>

이것은 시작일 뿐이지만, 동적으로 option 태그를 만들어지 않습니다. +options_for_select+ 헬퍼를 이용해서 option 태그를 만들 수 있습니다:

<erb>
<%= options_for_select([['Lisbon', 1], ['Madrid', 2], ...]) %>

결과 HTML:

<option value="1">Lisbon</option>
<option value="2">Madrid</option>
...
</erb>

+options_for_select+ 의 첫번째 인수는 중첩 배열로써 각각의 요소는 두개의 요소를 가집니다: option 텍스트(city name)와 option 값(city id). option 값이 컨트롤러로 제출될 것입니다. 종종 이 값은 해당하는 데이터베이스 객체의 id 값이 되기도 하지만 반드시 그렇게 할 필요는 없습니다. 

이제, +select_tag+ 와 +options_for_select+ 을 합쳐서 우리가 원하는 완전한 마크업을 얻을 수 있을 것입니다:

<erb>
<%= select_tag(:city_id, options_for_select(...)) %>
</erb>

+options_for_select+ 는 특정 option 값을 넘겨 받아 해당 option을 미리 선택되도록 할 수 있습니다. 

<erb>
<%= options_for_select([['Lisbon', 1], ['Madrid', 2], ...], 2) %>

결과 HTML:

<option value="1">Lisbon</option>
<option value="2" selected="selected">Madrid</option>
...
</erb>

레일스는 만들어지는 option의 값이 이 값과 같을 때마다 해당 option에 +selected+ 속성을 추가해 줄 것입니다. 

TIP: +options_for_select+ 의 두번째 인수는 우리가 원하는 내부 값과 정확하게 일치해야 합니다. 특히, 그 값이 정수 2일 경우 문자 "2"를 넘겨 줄 수 없다는 것입니다. 즉, 정수 2을 넘겨주어야 합니다. +params+ 해쉬로부터 얻어내는 값들은 모두 문자열이기 때문에 주의해야 합니다. 

h4(#Select_Boxes_for_Dealing_with_Models). Select Box를 모델과 연결하기 

대부분의 경우, 폼 컨트롤은 특정 데이터베이스 모델로 연결될 것이며 기대하는 바와 같이 레일스는 그러한 목적에 맞는 헬퍼를 제공해 줍니다. 다른 폼 헬퍼와의 일관성을 유지하기 위해, 모델과 연결할 때는 +select_tag+ 에서 끝에 있는 +_tag+ 를 제거하게 됩니다:

<ruby>
# controller:
@person = Person.new(:city_id => 2)
</ruby>

<erb>
# view:
<%= select(:person, :city_id, [['Lisbon', 1], ['Madrid', 2], ...]) %>
</erb>

option 배열인 세번째 매개변수는 +options_for_select+ 로 넘겨지는 인수와 정확히 동일하다는 것을 주목하기 바랍니다. 한가지 우리가 얻을 수 있는 잇점은 사용자가 이미 한가지 옵션을 선택한 경우 해당 city를 미리 선택하는 것에 대해 걱정할 필요가 없게 된다는 것입니다. 레일스가 +@person.city_id+ 속성을 읽어 대신 이러한 작업을 해 줄 것이기 때문입니다. 

다른 헬퍼에서와 같이, +@person+ 개체에 연결된 폼 빌더 상에서 +select+ 헬퍼를 사용할 거라면 문구는 다음과 같을 것입니다:

<erb>
# select on a form builder
<%= f.select(:city_id, ...) %>
</erb>

WARNING: +collect_select+, +select_tag+ 에서와 같이 +select+ 를 이용해서 +belongs_to+ 관계를 설정하고자 한다면 관계 자체의 이름이 아니라 foreign key 이름(위의 예제에서는 +city_id+)을 넘겨주어야 합니다. +city_id+ 대신에 +city+ 를 지정한다면, +params+ 해쉬를 +Person.new+ 나 +update_attributes+ 로 넘겨줄 때 액티브 레코드는 <tt> ActiveRecord::AssociationTypeMismatch: City(#17815740) expected, got String(#1138750) </tt> 와 같은 예외를 발생시킬 것입니다. 이에 대한 다른 관점은 폼 헬퍼는 속성을 수정하기만 한다는 것입니다. 또한 사용자가 foreign key를 직접 수정할 수 있도록 할 때 보안상의 문제가 발생할 수 있다는 것에도 주의해야 합니다. 이 때, +attr_protected+ 와 +attr_accessible+ 사용을 고려할 수도 있습니다. 이것에 대한 더 자세한 내용은 "Ruby On Rails Security Guide":security.html#_mass_assignment 을 참고하기 바랍니다. 

h4(#Option_Tags_from_a_Collection_of_Arbitrary_Objects). 
임의의 객체 컬렉션으로부터 Option 태그 만들기 

+options_for_select+ 를 이용하여 option 태그를 만들 때는 각 option에 대한 텍스트와 값을 포함하는 배열을 만들어 주어야 합니다. 그러나, 아마도 액티브 레코드 모델인 City 모델을 가지고 있고 그 모델의 객체 컬렉션으로부터 option 태그를 만들고자 한다면 어떻게 될까? 한가지 해결책은 각각의 객체들에 대해서 반복동작을 취하여 중첩된 배열을 만드는 것입니다:

<erb>
<% cities_array = City.all.map { |city| [city.name, city.id] } %>
<%= options_for_select(cities_array) %>
</erb>

이것은 완벽하고도 유효한 해결책이지만 레일스는 보다 간단한 대안을 제공해 줍니다: +options_from_collection_for_select+. 이 헬퍼는 임의의 객체 컬렉션과 이에 더해서 두개의 인수를 필요로 합니다: option *값* 과 *텍스트* 각각을 불러오는 메소드의 이름:

<erb>
<%= options_from_collection_for_select(City.all, :id, :name) %>
</erb>

이름이 내포하는 있는 바와 같이 이것은 단지 option 태그를 만들어 줍니다. 따라서 select box가 동작을 하도록 하기 위해서는 +options_for_select+ 에서와 같이 +select_tag+ 와 함께 사용할 필요가 있습니다. 모델 객체와 동작하기 위해서는, +select+ 가 +select_tag+ 와 +options_for_select+ 을 함께 사용하는 것같이, +collection_select+ 는 +options_from_collection_for_select+ 와 함께 +select_tag+ 를 사용해야 합니다. 

<erb>
<%= collection_select(:person, :city_id, City.all, :id, :name) %>
</erb>

정리하면, +options_from_collection_for_select+ 이 +collection_select+ 에 대한 것이라면 +options_for_select+ 은 +select+ 에 대한 헬퍼인 것입니다.

NOTE: +options_for_select+ 로 넘겨주는 option 쌍은 name이 먼저오고 id가 두번째로 오게 됩니다. 그러나 +options_from_collection_for_select+ 에서는 첫번째 인수가 값을 가져오는 메소드이고 두번째 인수는 텍스트를 가져오는 메소드입니다.

h4. Time Zone and Country Select

레일스에서 시간대영역 지원을 강화하기 위해서 사용자들에게 그들이 위치한 시간대 영역을 물어 봐야 합니다. 그러기 위해서, +collection_select+ 를 이용하여 미리 정의된 TimeZone 객체의 목록으로부터 선택할 수 있는 옵션을 만들 필요가 있지만, 이미 이러한 것을 포함하는 +time_zone_select+ 헬퍼를 이용하면 간단하게 해결할 수 있습니다:

<erb>
<%= time_zone_select(:person, :time_zone) %>
</erb>

좀 더 유연성 있는 방법으로 +time_zone_options_for_select+ 헬퍼를 이용할 수 있습니다. 이 두 메소드에서 사용할 수 있는 인수에 대해서 알고자 한다면 API 문서를 읽어 보기 바랍니다. 

레일스는 국가를 선택하기 위한 +country_select+ 헬퍼를 _제공했었지만_ 이제는 "country_select plugin":https://github.com/chrislerum/country_select 으로 프레임워크에서 분리되었습니다. 이 플러그인을 사용할 때 주의할 점은 목록에서 특정 국가명을 포함할 것인지에 대한 판단은 정해지지 않았다는 것입니다. 이것은 이미 이 기능이 레일스에서 빠졌기 때문입니다. 
  
h3(#Using_Date_and_Time_Form_Helpers). 날짜 시간 폼 헬퍼 사용하기

날짜 시간 헬퍼는 두가지 측면에서 기존의 다른 폼 헬퍼와는 차이점이 있습니다:

# 날짜와 시간은 하나의 input 엘리먼트로 표시할 수 없다는 것입니다. 대신에 각 컴포턴트 당 하나(년, 월, 일 등)의 엘리먼트가 필요하며 따라서 날짜 또는 시간값을 넘겨 받은 +params+ 에는 하나의 값을 가지고 있지 않게 됩니다.
# 다른 헬퍼는 해당 헬퍼가 단순기능을 가진 헬퍼인지 모델 객체에 연결되어 작동하는 헬퍼인지를 구분하기 위해 +_tag+ 를 이용하고 있습니다. 그러나 날짜와 시간에 대해서는, +select_date+, +select_time+, +select_datetime+ 헬퍼는 단순 헬퍼에 해당하고, +date_select+, +time_select+, +datetime_select+ 는 모델 객체 헬퍼에 해당합니다.  

이 두 종류의 날짜시간 관련 헬퍼는 년, 월, 일 등에 해당하는 select box 군을 만들게 될 것입니다.

h4(#Barebones Helpers). 단순 헬퍼

+select_*+ 헬퍼 군은 첫번째 인수로써 현재 선택된 값으로 사용될 Date, Time, 또는 DateTime 클래스 인스턴스를 취합니다. 이것을 생략하면 현재 날짜가 대신 사용됩니다. 예를 들면

<erb>
<%= select_date Date.today, :prefix => :start_date %>
</erb>

결과 HTML(코드의 간결성을 유지하기 위해서 실제 옵션값은 생략합니다):

<html>
<select id="start_date_year" name="start_date[year]"> ... </select>
<select id="start_date_month" name="start_date[month]"> ... </select>
<select id="start_date_day" name="start_date[day]"> ... </select>
</html>

위의 input은 +:year+, +:month+, +:day+ 키를 가진 해쉬를 +params[:start_date]+ 로 넘겨 줄 것입니다. 실제 Time 또는 Date 객체를 얻기 위해서는 각각의 키에 대한 값들을 구해서 적절한 객체 생성자에게 넘겨 주어야 합니다. 예를 들면

<ruby>
Date.civil(params[:start_date][:year].to_i, params[:start_date][:month].to_i, params[:start_date][:day].to_i)
</ruby>

+:prefix+ 옵션은 +params+ 해쉬로부터 날짜 부분의 해쉬값을 구하기 위해서 사용하는 키 이름을 지정합니다. 여기서는 +start_date+ 로 설정되어 있지만 생략하면 +date+ 가 디폴트로 설정됩니다. 

h4(#select-model-object-helpers). 모델 객체 헬퍼

액티브 레코드는 +params+ 해쉬의 각 요소가 데이터베이스 테이블의 한 속성에 해당하는 것으로 기대하기 때문에, +select_date+ 는 액티브 레코드 객체를 갱신하거나 새로 추가하는 폼에서 제대로 작동하지 않게 됩니다. 날짜와 시간에 대한 모델객체 헬퍼는 특별한 이름을 가진 매개변수를 제출(submit)하며 액티브 레코드는 해당 이름을 보고 이 매개변수는 다른 매개변수와 함께 처리되어야 한다고 판단하여 해당 컬럼에 맞는 객체 생성자로 넘겨주게 됩니다. 예를 들면: 

<erb>
<%= date_select :person, :birth_date %>
</erb>

결과 HTML(간결함을 유지하기 위해 실제 옵션 값은 생략합니다.)

<html>
<select id="person_birth_date_1i" name="person[birth_date(1i)]"> ... </select>
<select id="person_birth_date_2i" name="person[birth_date(2i)]"> ... </select>
<select id="person_birth_date_3i" name="person[birth_date(3i)]"> ... </select>
</html>

이것은 다음과 같은 +params+ 해쉬 결과를 보여 줍니다.

<ruby>
{:person => {'birth_date(1i)' => '2008', 'birth_date(2i)' => '11', 'birth_date(3i)' => '22'}}
</ruby>

이 +params+ 해쉬가 +Person.new+ (또는 +update_attribute+)로 넘겨지면, 액티브 레코드는 이 매개변수가 모두 +birth_date+ 속성을 만들어내기 위해 사용될 것이라고 알게 되고, +Date.civil+ 와 같은 함수로 보내는 순서를 결정하기 위해 매개변수의 끝에 붙은 정보를 이용하게 됩니다. 

h4(#Common_Options). 공통 옵션

이 두개의 헬퍼 군 모두가 각각의 select 태그를 만들기 위해 동일 핵심 셋 함수들을 이용하는데 대체적으로 같은 옵션을 취합니다. 특히, 기본적으로 레일스는 현재 년도의 전후로 5년간의 년도 옵션을 만들 것입니다. 이것이 적절치 못하다고 생각이 될 때는 +:start_year+ 와 +:end_year+ 옵션을 지정하여 변경할 수 있습니다. 사용가능한 옵션의 광범위한 목록은 "API documentation":http://api.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html 를 참고하시면 됩니다.  

원칙적으로 모델객체에 대해서 작업을 할 때는 +date_selet+ 를, 날짜별로 결과를 필터하는 검색 폼과 같은 경우에는 +select_date+ 를 사용해야 합니다. 

NOTE: 많은 경우에, 내장된 날짜 선택기는 날짜와 요일사이의 관계를 산출해야할 경우에 사용자들에게 도움을 주지 못하기 때문에 어설프게 보입니다. 

h4(#Individual_Components). 각각의 컴포넌트에 대해서

경우에 따라 년도 또는 월과 같은 날짜 컨포넌트 중 부분 요소에 대한 것만을 보여주고자 할 경우가 있습니다. 레일스는 이러한 경우를 위해서 각 컨포넌트 당 한개식의 헬퍼를 제공해 줍니다: +select_year+, +select_month+, +select_day+, +select_hour+, +select_minute+, +select_second+. 이 헬퍼들은 매우 간단해서 사용하기가 쉽습니다. 기본적으로 이것들은 시간 컴포넌트의 이름을 따서 input 필드를 만들게 되는데, 예를 들면, +select_year+ 에 대해서는 "year", +select_month+ 에 대해서는 "month" 등과 같습니다. 또한, 이러한 이름은 +:field_name+ 옵션을 이용하여 변경할 수도 있습니다. +:prefix+ 옵션은 +select_date+ 와 +select_time+ 에서와 동일하게 작동하며 동일한 기본값을 가지게 됩니다.  

첫번째 매개변수에는 선택상태로 지정될 옵션값을 지정하며 Date, Time 또는 DateTime 클래스의 인스턴스(이 경우에는 관련 컴포넌트만 가져오게 됨)나 숫자가 될 수 있습니다. 예를 들면

<erb>
<%= select_year(2009) %>
<%= select_year(Time.now) %>
</erb>

이것은 현재 년도가 2009년인 경우 같은 결과를 보일 것이며 사용자가 선택한 값은 +params[:date][:year]+ 로 받을 수 있게 됩니다. 

h3(#Uploading_Files). 파일 업로드하기

그것이 특정인의 사진이거나 처리해야할 데이터를 포함하고 있는 CSV 파일이어도 좋습니다. 여하간 이러한 파일을 업로드하는 작업은 흔이 있는 일입니다. 파일 업로드시 기억해야 할 가장 중요한 것은 결과문의 폼 인코딩을 "multipart/form-data"로 *설정해야 한다*는 것입니다. +form_for+ 를 사용할 경우 이것을 자동으로 설정될 것이지만, +form_tag+ 를 사용한다면 다음의 예와 같이 직접 설정해 주어야 합니다.  

다음의 두 폼은 모두 파일을 업로드합니다.

<erb>
<%= form_tag({:action => :upload}, :multipart => true) do %>
  <%= file_field_tag 'picture' %>
<% end %>

<%= form_for @person do |f| %>
  <%= f.file_field :picture %>
<% end %>
</erb>

NOTE: 레일스 3.1부터는 +form_for+ 를 이용하여 폼을 만들 경우 블럭내에 +file_field+ 를 사용한다면 폼의 인코딩은 자동으로 <tt>multipart/form-data</tt> 로 설정됩니다. 이전 버전에서는 직접 이 부분을 설정해 주어야 합니다.  

레일스는 보통 짝을 가지는 헬퍼를 제공해 줍니다: 단순 헬퍼인 +file_field_tag+ 와 모델객체 헬퍼인 +file_field+. 다른 헬퍼와의 유일한 차이점은, 의미없는 작업이 될 수 있기 때문에, 파일 input에 대한 기본값을 설정할 수 없다는 것입니다. 기대하는 바와 같이 첫번째 경우에는 업로드된 파일이 +params[:picture]+ 에 있고 두번째 경우에는 +params[:person][:picture]+ 에 있게 됩니다. 

h4(#What_Gets_Uploaded). 업로드된 것

+params+ 해쉬에 있는 객체는 IO 하위클래스의 인스턴스입니다. 업로드된 파일의 크기에 따라, 사실은 업로드된 것은 StringIO 또는 임시파일 형태의 File 클래스 인스턴스가 될 수 있습니다. 둘 다의 경우에서, 업로드된 객체는 +original_filename+ 이라는 속성에 사용자의 컴퓨터상의 파일이름을 가지게 되며, +content_type+ 속성에는 업로드된 파일의 MIME형을 포함하게 됩니다. 다음의 코드는 이전 예에서 보여 준 폼하에서 가정할 때, 원본 파일과 동일한 이름으로 +#{Rails.root}/public/uploads+ 디렉토리에 업로드된 내용을 저장하게 됩니다. 

<ruby>
def upload
  uploaded_io = params[:person][:picture]
  File.open(Rails.root.join('public', 'uploads', uploaded_io.original_filename), 'w') do |file|
    file.write(uploaded_io.read)
  end
end
</ruby>

일단 파일이 업로드되면, 일어날 수 있는 많은 일들이 있습니다. 해당 파일을 어디에 저장할 것인가(디스크, Amazon S3 등), 또 어느 모델로 연결을 시킬 것인가, 그리고 이미지 파일일 경우 크기를 조절하고 썸네일 이미지를 만드는 것까지 다양할 수 있습니다. 이러한 것에 대한 복잡한 내용은 본 가이드의 영역을 벗어나는 것이지만, 이러한 작업을 도와줄 수 있는 몇가지 라이브러리들이 있습니다. 이러한 것들 중에 보다 잘 알려진 것으로는 "CarrierWave":https://github.com/jnicklas/carrierwave 와 "Paperclip":http://www.thoughtbot.com/projects/paperclip 가 있습니다.

NOTE: 사용자가 파일을 선택하지 않을 경우 해당 매개변수는 빈 문자열이 될 것입니다. 

h4(#Dealing_with_Ajax). Ajax로 처리하기

다른 폼과는 달리, 비동기적으로 파일 업로드 폼을 만드는 것은 +form_for+ 헬퍼에 <tt>:remote => true</tt> 옵션을 지정하는 것 만큼 쉽지 않습니다. Ajax 폼을 사용하면, 사용자의 브라우저에 있는 자바스크립트가 데이터를 서버로 전송하기 위한 준비작업(serialization)을 하게 되며 자바스크립트가 로컬 하드 드라이브로부터 파일을 읽을 수 없을 경우 파일이 업로드 되지 못합니다. 대부분의 해결책은 폼 제출(submission)의 대상을 눈에 보이지 않는 iframe을 이용할 것입니다.  

h3(#Customizing_Form_Builders). 폼 빌더 변경하기

이전에 언급한 바와 같이 +form_for+ 와 +fields_for+ 로 만들어지는 객체는 FormBuilder(또는 이것의 하위클래스)의 인스턴스입니다. 폼 빌더는 폼 엘리먼트를 하나의 객체로 나타내기 위한 개념을 내포하고 잇습니다. 물론 일반적인 방법으로 자신만의 폼을 위한 헬퍼를 작성할 수 있을 뿐 아니라 FormBuilder를 상속받아 헬퍼를 추가할 수도 있습니다. 예를 들면

<erb>
<%= form_for @person do |f| %>
  <%= text_field_with_label f, :first_name %>
<% end %>
</erb>

이것은 아래의 것으로 대신할 수 있습니다. 

<erb>
<%= form_for @person, :builder => LabellingFormBuilder do |f| %>
  <%= f.text_field :first_name %>
<% end %>
</erb>

여기서 LabellingFormBuilder 클래스를 아래와 같이 정의할 수 있습니다:

<ruby>
class LabellingFormBuilder < ActionView::Helpers::FormBuilder
  def text_field(attribute, options={})
    label(attribute) + super
  end
end
</ruby>

이것을 자주 재사용한다면 자동으로 +:builder => LabellingFormBuilder+ 옵션을 적용하는 +labeled_form_for+ 헬퍼를 정의할 수 있습니다.

이렇게 사용되는 폼 빌더는 또한 동작시 일어나는 작업을 결정합니다. 
 
<erb>
<%= render :partial => f %>
</erb>

+f+ 가 FormBuilder 인스턴스라면 파셜 객체를 폼 빌더로 설정하여 +form+ 파셜을 렌더링할 것입니다. 폼 빌더가 LabellingFormBuilder 클래스라면 +labelling_form+ 파셜이 대신 렌더링될 것입니다. 

h3(#Understanding_Parameter_Naming_Conventions). 매개변수 명명 규칙 이해하기

이전 센션에서 본 바와 같이, 폼으로부터 넘겨진 값들은 +params+ 해쉬의 최상위 레벨에 있거나 다른 해쉬에 중첩될 수 있습니다. 예를 들어, Person 모델에 대한 표준 +create+ 액션에서의 +params[:model]+ 은 대개 person 객체가 만드는 모든 속성들에 대한 해쉬 형태를 취할 것입니다. +params+ 해쉬는 또한 배열, 해쉬배열 등을 포함할 수 있습니다.  

기본적으로 HTML 폼은 구조화된 데이터 형태에 대해서 알지 못하고 폼이 생성하는 것은 이름과 값이 짝을 이루는 형태를 취합니다. 여기서 이름과 값은 단순히 문자열에 불과합니다. 어플리케이션에서 보게되는 배열과 해쉬는 레일스가 사용하는 규칙에 따라 이름 지워진 매개변수들의 결과인 것입니다. 

TIP: 컨솔을 이용하면 Rack의 매개변수 파서를 직접 호출하여 이 섹션에 있는 예제를 테스트해 볼 수 있습니다. 예를 들면, 

<ruby>
Rack::Utils.parse_query "name=fred&phone=0123456789"
# => {"name"=>"fred", "phone"=>"0123456789"}
</ruby>

h4(#Basic_Structures). 기본 구조

두개의 기본 구조는 배약과 해쉬입니다. 해쉬는 +params+ 해쉬에서 값을 얻기 위해 사용되는 문법을 반영합니다. 예를 들어 특정 폼이 아래의 HTML을 포함한다면 

<html>
<input id="person_name" name="person[name]" type="text" value="Henry"/>
</html>

+params+ 해쉬는 다음과 같은 데이터 구조를 포함할 것입니다. 

<erb>
{'person' => {'name' => 'Henry'}}
</erb>

그리고 컨트롤러에서 +params[:person][:name]+ 으로 제출된 값을 얻게 될 것입니다.  

해쉬는 원하는 만큼 중첩해서 작성될 수 있습니다. 예를 들면

<html>
<input id="person_address_city" name="person[address][city]" type="text" value="New York"/>
</html>

이 결과 아래의 데이터 구조를 포함하는 +params+ 해쉬를 볼 수 있게 될 것입니다. 

<ruby>
{'person' => {'address' => {'city' => 'New York'}}}
</ruby>

보통 레일스는 중복되는 매개변수 이름을 무시합니다. 매개변수 이름이 비어있는 꺽쇄괄호([])를 포함한다면 배열형태로 누적될 것입니다. 사용자가 복수개의 전화번호를 입력할 수 있도록 하고자 한다면 아래와 같이 작성할 수 있습니다:

<html>
<input name="person[phone_number][]" type="text"/>
<input name="person[phone_number][]" type="text"/>
<input name="person[phone_number][]" type="text"/>
</html>

이것은 +params[:person][:phone_number]+ 가 배열형태를 취하도록 해 줍니다. 

h4(#Combining_Them). 혼합해서 사용하기

이 두가지 개념을 혼합해서 매칭시킬 수 있습니다. 예를 들면, 해쉬의 엘리먼트 하나는 이전 예에서와 같이 하나의 배열일 수 있고 해쉬의 배열을 만들 수 있습니다. 예를 들어, 아래의 폼에서와 같이 반복해서 작성하면 여러개의 주소를 작성할 수 있습니다. 

<html>
<input name="addresses[][line1]" type="text"/>
<input name="addresses[][line2]" type="text"/>
<input name="addresses[][city]" type="text"/>
</html>

이것은 +params[:addresses]+ 가 +line1+, +line2+, +city+ 키를 가지는 해쉬의 배열형태를 가지도록 해 줍니다. 레일스는 현재 해쉬에 있는 input 이름을 만날 때마다 하나의 해쉬로 값을 누적하게 됩니다. 

그러나 제한이 있습니다. 해쉬는 원하는 만큼 중첩시킬 수 있지만, 일차원 수준의 배열화만 가능합니다. 배열은 대개 해쉬로 대체할 수 있는데, 예를 들면 모델객체 배열 대신에 모델객체의 id, 배열 인데스, 또는 다른 매개변수를 키로 하는 모델객체 해쉬를 만들 수 있습니다.   

WARNING: 배열 매개변수는 +check_box+ 헬퍼와 함께 사용하기가 만만치 않습니다. HTML 규정에 보면 체크되지 않은 체크박스는 아무런 값도 제출(submit)하지 않습니다. 그러나, 종종 체크박스가 항상 임의의 값을 제출하는 것이 편리할 경우가 있습니다. +check_box+ 헬퍼는 이것을 해결하기 위해서 속임수를 쓰는데, 같은 이름을 가지는 숨겨진 보조 input을 만들게 됩니다. 그래서 체크박스를 체크하지 않을 경우 같은 이름의 숨겨진 input만 제출되도록 하며 체크할 경우에는 두개 모두가 제출되도록 하지만, 이때는 체크박스가 제출한 값이 우선권을 가지게 됩니다. 배열 매개변수로 작업을 할 때, 이런 중복 제출(submit)로 레일스는 혼란스러워 하게 될 것입니다. 왜냐하면, 중복된 input 이름은 새로운 배열 요소를 시작하는 시점을 결정하는 방법이기 때문입니다. 따라서 +check_box_tag+ 를 사용하거나 배열 대신 해쉬를 사용하는 것을 선호하게 됩니다. 

h4(#Using_Form_Helpers). 폼 헬퍼 사용하기

이전 섹션에서는 레일스 폼 헬퍼를 전혀 사용하지 않았습니다. input 이름을 직접 만들어 +text_field_tag+ 헬퍼로 직접 넘겨 줄 수 있는 반면, 레일스는 또한 한층 높은 차원의 지원을 제공해 줍니다. 제량에 따라 두개의 툴을 사용할 수 있는데, 하나는 +form_for+ 와 +fields_for+ 헬퍼에 name 매개변수를 사용하는 것이고 다른 하나는 +:index+ 옵션을 사용하는 것입니다. 

person 객체의 주소 각각을 수정하기 위한 필드 셋을 가진 폼을 렌더링하기를 원할 수 있습니다. 예를 들면:

<erb>
<%= form_for @person do |person_form| %>
  <%= person_form.text_field :name %>
  <% @person.addresses.each do |address| %>
    <%= person_form.fields_for address, :index => address do |address_form|%>
      <%= address_form.text_field :city %>
    <% end %>
  <% end %>
<% end %>
</erb>

person이 id 23과 45를 가진 두개의 주소를 가지고 있다면, 다음과 같은 결과를 만들어 줄 것입니다. 

<html>
<form accept-charset="UTF-8" action="/people/1" class="edit_person" id="edit_person_1" method="post">
  <input id="person_name" name="person[name]" size="30" type="text" />
  <input id="person_address_23_city" name="person[address][23][city]" size="30" type="text" />
  <input id="person_address_45_city" name="person[address][45][city]" size="30" type="text" />
</form>
</html>

이것은 다음과 같은 +params+ 해쉬를 넘겨 줄 것입니다. 

<ruby>
{'person' => {'name' => 'Bob', 'address' => {'23' => {'city' => 'Paris'}, '45' => {'city' => 'London'}}}}
</ruby>

레일스는 처음의 폼 빌더에서 +fields_for+ 를 호출했기 때문에 모든 input은 person 해쉬의 일부임을 알게됩니다. +:index+ 옵션을 지정하여 input의 이름을 +person[address][city]+ 라고 하지 말고, address와 city 사이에 []으로 둘러싸인 인덱스 번호를 삽입하라고 레일스에게 알려 줍니다. 우리가 했던 것 처럼, 액티브 레코드 객체를 넘겨주게 되면, 레일스는 이 객체에 대해서 데이터베이스 id 값을 반환하는 +to_param+ 를 호출하게 됩니다. 이것은 수정할 Address 레코드 위치를 찾는 것이 쉬워지기 때문에 종종 유용할 때가 있습니다. 이외에도 어떤 다른 의미를 가지는 숫자, 문자열, 또는 +nil+ 값을 넘겨 줄 수 있습니다. 결과적으로 하나의 배열 매개변수가 만들어 질 것입니다. 

더 복잡한 중첩상태를 만들기 위해서, 이전 예에서 +person[address]+ 와 같이 input 이름의 첫 부분을 명시할 수 있습니다. 예를 들면

<erb>
<%= fields_for 'person[address][primary]', address, :index => address do |address_form| %>
  <%= address_form.text_field :city %>
<% end %>
</erb>

이것은 다음과 같이 input을 만들 것입니다. 

<html>
<input id="person_address_primary_1_city" name="person[address][primary][1][city]" size="30" type="text" value="bologna" />
</html>

일반적인 법칙과 같이, 최종 input 이름은 +fields_for+/+form_for+ 헬퍼에 주어진 이름, 인덱스 값, 속성명을 합친 것입니다. 물론 +text_field+ 와 같은 헬퍼에 직접 +:index+ 옵션을 넘겨 줄 수도 있지만, input 컨트롤 각각에 대해서 보다는 폼 빌더 레벨에서 이것을(+:index+ 옵션) 명시하는 것이 대개 반복을 덜 할 수 있습니다. 

간단하게는, 이름에 []을 붙이고 +:index+ 옵션을 생략할 수 있습니다. 이것은 +:index => address+ 를 지정하는 것과 같은 것입니다. 

<erb>
<%= fields_for 'person[address][primary][]', address do |address_form| %>
  <%= address_form.text_field :city %>
<% end %>
</erb>

이것은 정확히 이전 예와 같은 결과를 만들게 됩니다.

h3(#Forms_to_external_resources). 외부 리소스로 폼 제출하기

어떤 데이터를 외부 리소스로 보내고자 할 경우에도, 레일스 폼 헬퍼를 이용하여 폼을 빌드하는 것이 좋습니다. 그러나, 때때로 이 리소스에 대해서 +authenticity_token+ 을 설정해 줄 필요가 있습니다. +:authenticity_token => 'your_external_token'+ 를 +form_tag+ 옵션으로 넘겨 주면 됩니다:

<erb>
<%= form_tag 'http://farfar.away/form', :authenticity_token => 'external_token') do %>
  Form contents
<% end %>
</erb>

때때로, 지불 게이트웨이와 같이, 데이터를 외부 리소스로 보낼 때, 폼에서 사용할 수 있는 필드가 외부 API 때문에 제한될 수 있습니다. 그래서 +authenticity_token+ 필드를 만들고 싶지 않을 경우가 있습니다. 이 때는, +authenticity_token+ 옵션을 +false+ 값으로 설정하면 됩니다:

<erb>
<%= form_tag 'http://farfar.away/form', :authenticity_token => false) do %>
  Form contents
<% end %>
</erb>

동일한 방법이 +form_for+ 헬퍼에서도 가능합니다:

<erb>
<%= form_for @invoice, :url => external_url, :authenticity_token => 'external_token' do |f|
  Form contents
<% end %>
</erb>

또는 아예 +authenticity_token+ 필드를 렌더링하고 싶지 않을 경우에는

<erb>
<%= form_for @invoice, :url => external_url, :authenticity_token => false do |f|
  Form contents
<% end %>
</erb>

h3(#Building_Complex_Forms). 복잡한 폼 빌드하기

많은 어플리케이션들의 구현수준이 향상되면서 단일 객체를 수정하는 간단한 폼의 수준을 넘어서게 되었습니다. 예를 들어, Person 객체를 생성할 때 사용자가 동일한 폼에서 집, 직장 등과 같이 여러개의 주소를 입력할 수 있도록 할 때입니다. 나중에 해당 person의 정보를 수정하고자 할 때, 사용자는 필요한 만큼 주소를 추가, 삭제, 수정할 수 있어야 합니다. 본 가이드에서는 이러한 것을 구현하는 필요한 모든 기법을 이미 소개하였으나 레일스는 아직 이러한 작업을 수행하는데 표준화된 방법을 가지고 있지 않습니다. 다음에서 이러한 것을 참고할 수 있습니다: 

* As of Rails 2.3, Rails includes "Nested Attributes":./2_3_release_notes.html#nested-attributes and "Nested Object Forms":./2_3_release_notes.html#nested-object-forms
* Ryan Bates' series of Railscasts on "complex forms":http://railscasts.com/episodes/75
* Handle Multiple Models in One Form from "Advanced Rails Recipes":http://media.pragprog.com/titles/fr_arr/multiple_models_one_form.pdf
* Eloy Duran's "complex-forms-examples":https://github.com/alloy/complex-form-examples/ application
* Lance Ivy's "nested_assignment":https://github.com/cainlevy/nested_assignment/tree/master plugin and "sample application":https://github.com/cainlevy/complex-form-examples/tree/cainlevy
* James Golick's "attribute_fu":https://github.com/jamesgolick/attribute_fu plugin


NOTE: *초벌번역* - 2012년 2월 16일 최효성(hschoidr@gmail.com) 譯

WARNING: 번역상의 오류가 있는 경우 _*로그인하신 후*_ "이곳":http://lab.wordstory.net/categories/3/posts/121 에 댓글을 남겨 주시기 바랍니다. 